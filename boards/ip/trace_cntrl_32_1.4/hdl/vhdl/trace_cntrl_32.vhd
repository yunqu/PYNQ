-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity trace_cntrl_32 is
generic (
    C_S_AXI_TRACE_CNTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_TRACE_CNTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    B_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_trace_cntrl_AWVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_AWREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_trace_cntrl_WVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_WREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_trace_cntrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_trace_cntrl_ARVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_ARREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_trace_cntrl_RVALID : OUT STD_LOGIC;
    s_axi_trace_cntrl_RREADY : IN STD_LOGIC;
    s_axi_trace_cntrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_trace_cntrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_trace_cntrl_BVALID : OUT STD_LOGIC;
    s_axi_trace_cntrl_BREADY : IN STD_LOGIC;
    s_axi_trace_cntrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of trace_cntrl_32 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "trace_cntrl_32,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.404000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=887,HLS_SYN_LUT=850}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal A_data_V_0_vld_in : STD_LOGIC;
    signal A_data_V_0_vld_out : STD_LOGIC;
    signal A_data_V_0_ack_in : STD_LOGIC;
    signal A_data_V_0_ack_out : STD_LOGIC;
    signal A_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal A_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal A_data_V_0_sel_rd : STD_LOGIC := '0';
    signal A_data_V_0_sel_wr : STD_LOGIC := '0';
    signal A_data_V_0_sel : STD_LOGIC;
    signal A_data_V_0_load_A : STD_LOGIC;
    signal A_data_V_0_load_B : STD_LOGIC;
    signal A_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_data_V_0_state_cmp_full : STD_LOGIC;
    signal A_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal A_keep_V_0_vld_in : STD_LOGIC;
    signal A_keep_V_0_vld_out : STD_LOGIC;
    signal A_keep_V_0_ack_in : STD_LOGIC;
    signal A_keep_V_0_ack_out : STD_LOGIC;
    signal A_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal A_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal A_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal A_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal A_keep_V_0_sel : STD_LOGIC;
    signal A_keep_V_0_load_A : STD_LOGIC;
    signal A_keep_V_0_load_B : STD_LOGIC;
    signal A_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_keep_V_0_state_cmp_full : STD_LOGIC;
    signal A_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal A_strb_V_0_vld_in : STD_LOGIC;
    signal A_strb_V_0_vld_out : STD_LOGIC;
    signal A_strb_V_0_ack_in : STD_LOGIC;
    signal A_strb_V_0_ack_out : STD_LOGIC;
    signal A_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal A_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal A_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal A_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal A_strb_V_0_sel : STD_LOGIC;
    signal A_strb_V_0_load_A : STD_LOGIC;
    signal A_strb_V_0_load_B : STD_LOGIC;
    signal A_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_strb_V_0_state_cmp_full : STD_LOGIC;
    signal A_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal A_user_V_0_vld_in : STD_LOGIC;
    signal A_user_V_0_vld_out : STD_LOGIC;
    signal A_user_V_0_ack_in : STD_LOGIC;
    signal A_user_V_0_ack_out : STD_LOGIC;
    signal A_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal A_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal A_user_V_0_sel_rd : STD_LOGIC := '0';
    signal A_user_V_0_sel_wr : STD_LOGIC := '0';
    signal A_user_V_0_sel : STD_LOGIC;
    signal A_user_V_0_load_A : STD_LOGIC;
    signal A_user_V_0_load_B : STD_LOGIC;
    signal A_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_user_V_0_state_cmp_full : STD_LOGIC;
    signal A_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal A_id_V_0_vld_in : STD_LOGIC;
    signal A_id_V_0_vld_out : STD_LOGIC;
    signal A_id_V_0_ack_in : STD_LOGIC;
    signal A_id_V_0_ack_out : STD_LOGIC;
    signal A_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal A_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal A_id_V_0_sel_rd : STD_LOGIC := '0';
    signal A_id_V_0_sel_wr : STD_LOGIC := '0';
    signal A_id_V_0_sel : STD_LOGIC;
    signal A_id_V_0_load_A : STD_LOGIC;
    signal A_id_V_0_load_B : STD_LOGIC;
    signal A_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_id_V_0_state_cmp_full : STD_LOGIC;
    signal A_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal A_dest_V_0_vld_in : STD_LOGIC;
    signal A_dest_V_0_vld_out : STD_LOGIC;
    signal A_dest_V_0_ack_in : STD_LOGIC;
    signal A_dest_V_0_ack_out : STD_LOGIC;
    signal A_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal A_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal A_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal A_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal A_dest_V_0_sel : STD_LOGIC;
    signal A_dest_V_0_load_A : STD_LOGIC;
    signal A_dest_V_0_load_B : STD_LOGIC;
    signal A_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_dest_V_0_state_cmp_full : STD_LOGIC;
    signal B_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal B_data_V_1_vld_in : STD_LOGIC;
    signal B_data_V_1_vld_out : STD_LOGIC;
    signal B_data_V_1_ack_in : STD_LOGIC;
    signal B_data_V_1_ack_out : STD_LOGIC;
    signal B_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal B_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal B_data_V_1_sel_rd : STD_LOGIC := '0';
    signal B_data_V_1_sel_wr : STD_LOGIC := '0';
    signal B_data_V_1_sel : STD_LOGIC;
    signal B_data_V_1_load_A : STD_LOGIC;
    signal B_data_V_1_load_B : STD_LOGIC;
    signal B_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_data_V_1_state_cmp_full : STD_LOGIC;
    signal B_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal B_keep_V_1_vld_in : STD_LOGIC;
    signal B_keep_V_1_vld_out : STD_LOGIC;
    signal B_keep_V_1_ack_in : STD_LOGIC;
    signal B_keep_V_1_ack_out : STD_LOGIC;
    signal B_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal B_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal B_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal B_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal B_keep_V_1_sel : STD_LOGIC;
    signal B_keep_V_1_load_A : STD_LOGIC;
    signal B_keep_V_1_load_B : STD_LOGIC;
    signal B_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_keep_V_1_state_cmp_full : STD_LOGIC;
    signal B_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal B_strb_V_1_vld_in : STD_LOGIC;
    signal B_strb_V_1_vld_out : STD_LOGIC;
    signal B_strb_V_1_ack_in : STD_LOGIC;
    signal B_strb_V_1_ack_out : STD_LOGIC;
    signal B_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal B_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal B_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal B_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal B_strb_V_1_sel : STD_LOGIC;
    signal B_strb_V_1_load_A : STD_LOGIC;
    signal B_strb_V_1_load_B : STD_LOGIC;
    signal B_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_strb_V_1_state_cmp_full : STD_LOGIC;
    signal B_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal B_user_V_1_vld_in : STD_LOGIC;
    signal B_user_V_1_vld_out : STD_LOGIC;
    signal B_user_V_1_ack_in : STD_LOGIC;
    signal B_user_V_1_ack_out : STD_LOGIC;
    signal B_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal B_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal B_user_V_1_sel_rd : STD_LOGIC := '0';
    signal B_user_V_1_sel_wr : STD_LOGIC := '0';
    signal B_user_V_1_sel : STD_LOGIC;
    signal B_user_V_1_load_A : STD_LOGIC;
    signal B_user_V_1_load_B : STD_LOGIC;
    signal B_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_user_V_1_state_cmp_full : STD_LOGIC;
    signal B_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal B_last_V_1_vld_in : STD_LOGIC;
    signal B_last_V_1_vld_out : STD_LOGIC;
    signal B_last_V_1_ack_in : STD_LOGIC;
    signal B_last_V_1_ack_out : STD_LOGIC;
    signal B_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal B_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal B_last_V_1_sel_rd : STD_LOGIC := '0';
    signal B_last_V_1_sel_wr : STD_LOGIC := '0';
    signal B_last_V_1_sel : STD_LOGIC;
    signal B_last_V_1_load_A : STD_LOGIC;
    signal B_last_V_1_load_B : STD_LOGIC;
    signal B_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_last_V_1_state_cmp_full : STD_LOGIC;
    signal B_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal B_id_V_1_vld_in : STD_LOGIC;
    signal B_id_V_1_vld_out : STD_LOGIC;
    signal B_id_V_1_ack_in : STD_LOGIC;
    signal B_id_V_1_ack_out : STD_LOGIC;
    signal B_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal B_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal B_id_V_1_sel_rd : STD_LOGIC := '0';
    signal B_id_V_1_sel_wr : STD_LOGIC := '0';
    signal B_id_V_1_sel : STD_LOGIC;
    signal B_id_V_1_load_A : STD_LOGIC;
    signal B_id_V_1_load_B : STD_LOGIC;
    signal B_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_id_V_1_state_cmp_full : STD_LOGIC;
    signal B_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal B_dest_V_1_vld_in : STD_LOGIC;
    signal B_dest_V_1_vld_out : STD_LOGIC;
    signal B_dest_V_1_ack_in : STD_LOGIC;
    signal B_dest_V_1_ack_out : STD_LOGIC;
    signal B_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal B_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal B_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal B_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal B_dest_V_1_sel : STD_LOGIC;
    signal B_dest_V_1_load_A : STD_LOGIC;
    signal B_dest_V_1_load_B : STD_LOGIC;
    signal B_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_dest_V_1_state_cmp_full : STD_LOGIC;
    signal data_compare_V : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal A_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_1_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_5_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_reg_137 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_read_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_compare_V_read_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal tmp_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_1_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_temp_data_V_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal A_temp_keep_V_reg_286 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_temp_strb_V_reg_291 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_temp_user_V_reg_296 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_temp_id_V_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_temp_dest_V_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_temp_last_V_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_temp_last_V_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal match_phi_fu_141_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal samples_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal samples_1_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00001001 : BOOLEAN;
    signal tmp_3_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component trace_cntrl_32_trace_cntrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_compare_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    trace_cntrl_32_trace_cntrl_s_axi_U : component trace_cntrl_32_trace_cntrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TRACE_CNTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TRACE_CNTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_trace_cntrl_AWVALID,
        AWREADY => s_axi_trace_cntrl_AWREADY,
        AWADDR => s_axi_trace_cntrl_AWADDR,
        WVALID => s_axi_trace_cntrl_WVALID,
        WREADY => s_axi_trace_cntrl_WREADY,
        WDATA => s_axi_trace_cntrl_WDATA,
        WSTRB => s_axi_trace_cntrl_WSTRB,
        ARVALID => s_axi_trace_cntrl_ARVALID,
        ARREADY => s_axi_trace_cntrl_ARREADY,
        ARADDR => s_axi_trace_cntrl_ARADDR,
        RVALID => s_axi_trace_cntrl_RVALID,
        RREADY => s_axi_trace_cntrl_RREADY,
        RDATA => s_axi_trace_cntrl_RDATA,
        RRESP => s_axi_trace_cntrl_RRESP,
        BVALID => s_axi_trace_cntrl_BVALID,
        BREADY => s_axi_trace_cntrl_BREADY,
        BRESP => s_axi_trace_cntrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_compare_V => data_compare_V,
        length_r => length_r);





    A_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_data_V_0_ack_out) and (ap_const_logic_1 = A_data_V_0_vld_out))) then 
                                        A_data_V_0_sel_rd <= not(A_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_data_V_0_vld_in) and (ap_const_logic_1 = A_data_V_0_ack_in))) then 
                                        A_data_V_0_sel_wr <= not(A_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_data_V_0_vld_in) and (ap_const_logic_1 = A_data_V_0_ack_out) and (A_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = A_data_V_0_vld_in) and (A_data_V_0_state = ap_const_lv2_2)))) then 
                    A_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_data_V_0_vld_in) and (ap_const_logic_0 = A_data_V_0_ack_out) and (A_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = A_data_V_0_ack_out) and (A_data_V_0_state = ap_const_lv2_1)))) then 
                    A_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_data_V_0_vld_in) and (A_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = A_data_V_0_ack_out) and (A_data_V_0_state = ap_const_lv2_1)) or ((A_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = A_data_V_0_vld_in) and (ap_const_logic_0 = A_data_V_0_ack_out))) and not(((ap_const_logic_0 = A_data_V_0_vld_in) and (ap_const_logic_1 = A_data_V_0_ack_out)))))) then 
                    A_data_V_0_state <= ap_const_lv2_3;
                else 
                    A_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_dest_V_0_ack_out) and (ap_const_logic_1 = A_dest_V_0_vld_out))) then 
                                        A_dest_V_0_sel_rd <= not(A_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_dest_V_0_vld_in) and (ap_const_logic_1 = A_dest_V_0_ack_in))) then 
                                        A_dest_V_0_sel_wr <= not(A_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_dest_V_0_vld_in) and (ap_const_logic_1 = A_dest_V_0_ack_out) and (ap_const_lv2_3 = A_dest_V_0_state)) or ((ap_const_logic_0 = A_dest_V_0_vld_in) and (ap_const_lv2_2 = A_dest_V_0_state)))) then 
                    A_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_dest_V_0_vld_in) and (ap_const_logic_0 = A_dest_V_0_ack_out) and (ap_const_lv2_3 = A_dest_V_0_state)) or ((ap_const_logic_0 = A_dest_V_0_ack_out) and (ap_const_lv2_1 = A_dest_V_0_state)))) then 
                    A_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_dest_V_0_vld_in) and (ap_const_lv2_2 = A_dest_V_0_state)) or ((ap_const_logic_1 = A_dest_V_0_ack_out) and (ap_const_lv2_1 = A_dest_V_0_state)) or ((ap_const_lv2_3 = A_dest_V_0_state) and not(((ap_const_logic_1 = A_dest_V_0_vld_in) and (ap_const_logic_0 = A_dest_V_0_ack_out))) and not(((ap_const_logic_0 = A_dest_V_0_vld_in) and (ap_const_logic_1 = A_dest_V_0_ack_out)))))) then 
                    A_dest_V_0_state <= ap_const_lv2_3;
                else 
                    A_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_id_V_0_ack_out) and (ap_const_logic_1 = A_id_V_0_vld_out))) then 
                                        A_id_V_0_sel_rd <= not(A_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_id_V_0_vld_in) and (ap_const_logic_1 = A_id_V_0_ack_in))) then 
                                        A_id_V_0_sel_wr <= not(A_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_id_V_0_vld_in) and (ap_const_logic_1 = A_id_V_0_ack_out) and (ap_const_lv2_3 = A_id_V_0_state)) or ((ap_const_logic_0 = A_id_V_0_vld_in) and (ap_const_lv2_2 = A_id_V_0_state)))) then 
                    A_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_id_V_0_vld_in) and (ap_const_logic_0 = A_id_V_0_ack_out) and (ap_const_lv2_3 = A_id_V_0_state)) or ((ap_const_logic_0 = A_id_V_0_ack_out) and (ap_const_lv2_1 = A_id_V_0_state)))) then 
                    A_id_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_id_V_0_vld_in) and (ap_const_lv2_2 = A_id_V_0_state)) or ((ap_const_logic_1 = A_id_V_0_ack_out) and (ap_const_lv2_1 = A_id_V_0_state)) or ((ap_const_lv2_3 = A_id_V_0_state) and not(((ap_const_logic_1 = A_id_V_0_vld_in) and (ap_const_logic_0 = A_id_V_0_ack_out))) and not(((ap_const_logic_0 = A_id_V_0_vld_in) and (ap_const_logic_1 = A_id_V_0_ack_out)))))) then 
                    A_id_V_0_state <= ap_const_lv2_3;
                else 
                    A_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_keep_V_0_ack_out) and (ap_const_logic_1 = A_keep_V_0_vld_out))) then 
                                        A_keep_V_0_sel_rd <= not(A_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_keep_V_0_vld_in) and (ap_const_logic_1 = A_keep_V_0_ack_in))) then 
                                        A_keep_V_0_sel_wr <= not(A_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_keep_V_0_vld_in) and (ap_const_logic_1 = A_keep_V_0_ack_out) and (ap_const_lv2_3 = A_keep_V_0_state)) or ((ap_const_logic_0 = A_keep_V_0_vld_in) and (ap_const_lv2_2 = A_keep_V_0_state)))) then 
                    A_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_keep_V_0_vld_in) and (ap_const_logic_0 = A_keep_V_0_ack_out) and (ap_const_lv2_3 = A_keep_V_0_state)) or ((ap_const_logic_0 = A_keep_V_0_ack_out) and (ap_const_lv2_1 = A_keep_V_0_state)))) then 
                    A_keep_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_keep_V_0_vld_in) and (ap_const_lv2_2 = A_keep_V_0_state)) or ((ap_const_logic_1 = A_keep_V_0_ack_out) and (ap_const_lv2_1 = A_keep_V_0_state)) or ((ap_const_lv2_3 = A_keep_V_0_state) and not(((ap_const_logic_1 = A_keep_V_0_vld_in) and (ap_const_logic_0 = A_keep_V_0_ack_out))) and not(((ap_const_logic_0 = A_keep_V_0_vld_in) and (ap_const_logic_1 = A_keep_V_0_ack_out)))))) then 
                    A_keep_V_0_state <= ap_const_lv2_3;
                else 
                    A_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_strb_V_0_ack_out) and (ap_const_logic_1 = A_strb_V_0_vld_out))) then 
                                        A_strb_V_0_sel_rd <= not(A_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_strb_V_0_vld_in) and (ap_const_logic_1 = A_strb_V_0_ack_in))) then 
                                        A_strb_V_0_sel_wr <= not(A_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_strb_V_0_vld_in) and (ap_const_logic_1 = A_strb_V_0_ack_out) and (ap_const_lv2_3 = A_strb_V_0_state)) or ((ap_const_logic_0 = A_strb_V_0_vld_in) and (ap_const_lv2_2 = A_strb_V_0_state)))) then 
                    A_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_strb_V_0_vld_in) and (ap_const_logic_0 = A_strb_V_0_ack_out) and (ap_const_lv2_3 = A_strb_V_0_state)) or ((ap_const_logic_0 = A_strb_V_0_ack_out) and (ap_const_lv2_1 = A_strb_V_0_state)))) then 
                    A_strb_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_strb_V_0_vld_in) and (ap_const_lv2_2 = A_strb_V_0_state)) or ((ap_const_logic_1 = A_strb_V_0_ack_out) and (ap_const_lv2_1 = A_strb_V_0_state)) or ((ap_const_lv2_3 = A_strb_V_0_state) and not(((ap_const_logic_1 = A_strb_V_0_vld_in) and (ap_const_logic_0 = A_strb_V_0_ack_out))) and not(((ap_const_logic_0 = A_strb_V_0_vld_in) and (ap_const_logic_1 = A_strb_V_0_ack_out)))))) then 
                    A_strb_V_0_state <= ap_const_lv2_3;
                else 
                    A_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_user_V_0_ack_out) and (ap_const_logic_1 = A_user_V_0_vld_out))) then 
                                        A_user_V_0_sel_rd <= not(A_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_user_V_0_vld_in) and (ap_const_logic_1 = A_user_V_0_ack_in))) then 
                                        A_user_V_0_sel_wr <= not(A_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_user_V_0_vld_in) and (ap_const_logic_1 = A_user_V_0_ack_out) and (ap_const_lv2_3 = A_user_V_0_state)) or ((ap_const_logic_0 = A_user_V_0_vld_in) and (ap_const_lv2_2 = A_user_V_0_state)))) then 
                    A_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_user_V_0_vld_in) and (ap_const_logic_0 = A_user_V_0_ack_out) and (ap_const_lv2_3 = A_user_V_0_state)) or ((ap_const_logic_0 = A_user_V_0_ack_out) and (ap_const_lv2_1 = A_user_V_0_state)))) then 
                    A_user_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_user_V_0_vld_in) and (ap_const_lv2_2 = A_user_V_0_state)) or ((ap_const_logic_1 = A_user_V_0_ack_out) and (ap_const_lv2_1 = A_user_V_0_state)) or ((ap_const_lv2_3 = A_user_V_0_state) and not(((ap_const_logic_1 = A_user_V_0_vld_in) and (ap_const_logic_0 = A_user_V_0_ack_out))) and not(((ap_const_logic_0 = A_user_V_0_vld_in) and (ap_const_logic_1 = A_user_V_0_ack_out)))))) then 
                    A_user_V_0_state <= ap_const_lv2_3;
                else 
                    A_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_data_V_1_ack_out) and (ap_const_logic_1 = B_data_V_1_vld_out))) then 
                                        B_data_V_1_sel_rd <= not(B_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_data_V_1_vld_in) and (ap_const_logic_1 = B_data_V_1_ack_in))) then 
                                        B_data_V_1_sel_wr <= not(B_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = B_data_V_1_vld_in) and (ap_const_logic_1 = B_data_V_1_ack_out) and (ap_const_lv2_3 = B_data_V_1_state)) or ((ap_const_logic_0 = B_data_V_1_vld_in) and (ap_const_lv2_2 = B_data_V_1_state)))) then 
                    B_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = B_data_V_1_vld_in) and (ap_const_logic_0 = B_data_V_1_ack_out) and (ap_const_lv2_3 = B_data_V_1_state)) or ((ap_const_logic_0 = B_data_V_1_ack_out) and (ap_const_lv2_1 = B_data_V_1_state)))) then 
                    B_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = B_data_V_1_vld_in) and (ap_const_lv2_2 = B_data_V_1_state)) or ((ap_const_logic_1 = B_data_V_1_ack_out) and (ap_const_lv2_1 = B_data_V_1_state)) or ((ap_const_lv2_3 = B_data_V_1_state) and not(((ap_const_logic_1 = B_data_V_1_vld_in) and (ap_const_logic_0 = B_data_V_1_ack_out))) and not(((ap_const_logic_0 = B_data_V_1_vld_in) and (ap_const_logic_1 = B_data_V_1_ack_out)))))) then 
                    B_data_V_1_state <= ap_const_lv2_3;
                else 
                    B_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_dest_V_1_ack_out) and (ap_const_logic_1 = B_dest_V_1_vld_out))) then 
                                        B_dest_V_1_sel_rd <= not(B_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_dest_V_1_vld_in) and (ap_const_logic_1 = B_dest_V_1_ack_in))) then 
                                        B_dest_V_1_sel_wr <= not(B_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = B_dest_V_1_vld_in) and (ap_const_logic_1 = B_dest_V_1_ack_out) and (ap_const_lv2_3 = B_dest_V_1_state)) or ((ap_const_logic_0 = B_dest_V_1_vld_in) and (ap_const_lv2_2 = B_dest_V_1_state)))) then 
                    B_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = B_dest_V_1_vld_in) and (ap_const_logic_0 = B_dest_V_1_ack_out) and (ap_const_lv2_3 = B_dest_V_1_state)) or ((ap_const_logic_0 = B_dest_V_1_ack_out) and (ap_const_lv2_1 = B_dest_V_1_state)))) then 
                    B_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = B_dest_V_1_vld_in) and (ap_const_lv2_2 = B_dest_V_1_state)) or ((ap_const_logic_1 = B_dest_V_1_ack_out) and (ap_const_lv2_1 = B_dest_V_1_state)) or ((ap_const_lv2_3 = B_dest_V_1_state) and not(((ap_const_logic_1 = B_dest_V_1_vld_in) and (ap_const_logic_0 = B_dest_V_1_ack_out))) and not(((ap_const_logic_0 = B_dest_V_1_vld_in) and (ap_const_logic_1 = B_dest_V_1_ack_out)))))) then 
                    B_dest_V_1_state <= ap_const_lv2_3;
                else 
                    B_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_id_V_1_ack_out) and (ap_const_logic_1 = B_id_V_1_vld_out))) then 
                                        B_id_V_1_sel_rd <= not(B_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_id_V_1_vld_in) and (ap_const_logic_1 = B_id_V_1_ack_in))) then 
                                        B_id_V_1_sel_wr <= not(B_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = B_id_V_1_vld_in) and (ap_const_logic_1 = B_id_V_1_ack_out) and (ap_const_lv2_3 = B_id_V_1_state)) or ((ap_const_logic_0 = B_id_V_1_vld_in) and (ap_const_lv2_2 = B_id_V_1_state)))) then 
                    B_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = B_id_V_1_vld_in) and (ap_const_logic_0 = B_id_V_1_ack_out) and (ap_const_lv2_3 = B_id_V_1_state)) or ((ap_const_logic_0 = B_id_V_1_ack_out) and (ap_const_lv2_1 = B_id_V_1_state)))) then 
                    B_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = B_id_V_1_vld_in) and (ap_const_lv2_2 = B_id_V_1_state)) or ((ap_const_logic_1 = B_id_V_1_ack_out) and (ap_const_lv2_1 = B_id_V_1_state)) or ((ap_const_lv2_3 = B_id_V_1_state) and not(((ap_const_logic_1 = B_id_V_1_vld_in) and (ap_const_logic_0 = B_id_V_1_ack_out))) and not(((ap_const_logic_0 = B_id_V_1_vld_in) and (ap_const_logic_1 = B_id_V_1_ack_out)))))) then 
                    B_id_V_1_state <= ap_const_lv2_3;
                else 
                    B_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_keep_V_1_ack_out) and (ap_const_logic_1 = B_keep_V_1_vld_out))) then 
                                        B_keep_V_1_sel_rd <= not(B_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_keep_V_1_vld_in) and (ap_const_logic_1 = B_keep_V_1_ack_in))) then 
                                        B_keep_V_1_sel_wr <= not(B_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = B_keep_V_1_vld_in) and (ap_const_logic_1 = B_keep_V_1_ack_out) and (ap_const_lv2_3 = B_keep_V_1_state)) or ((ap_const_logic_0 = B_keep_V_1_vld_in) and (ap_const_lv2_2 = B_keep_V_1_state)))) then 
                    B_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = B_keep_V_1_vld_in) and (ap_const_logic_0 = B_keep_V_1_ack_out) and (ap_const_lv2_3 = B_keep_V_1_state)) or ((ap_const_logic_0 = B_keep_V_1_ack_out) and (ap_const_lv2_1 = B_keep_V_1_state)))) then 
                    B_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = B_keep_V_1_vld_in) and (ap_const_lv2_2 = B_keep_V_1_state)) or ((ap_const_logic_1 = B_keep_V_1_ack_out) and (ap_const_lv2_1 = B_keep_V_1_state)) or ((ap_const_lv2_3 = B_keep_V_1_state) and not(((ap_const_logic_1 = B_keep_V_1_vld_in) and (ap_const_logic_0 = B_keep_V_1_ack_out))) and not(((ap_const_logic_0 = B_keep_V_1_vld_in) and (ap_const_logic_1 = B_keep_V_1_ack_out)))))) then 
                    B_keep_V_1_state <= ap_const_lv2_3;
                else 
                    B_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_last_V_1_ack_out) and (ap_const_logic_1 = B_last_V_1_vld_out))) then 
                                        B_last_V_1_sel_rd <= not(B_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_last_V_1_vld_in) and (ap_const_logic_1 = B_last_V_1_ack_in))) then 
                                        B_last_V_1_sel_wr <= not(B_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = B_last_V_1_vld_in) and (ap_const_logic_1 = B_last_V_1_ack_out) and (ap_const_lv2_3 = B_last_V_1_state)) or ((ap_const_logic_0 = B_last_V_1_vld_in) and (ap_const_lv2_2 = B_last_V_1_state)))) then 
                    B_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = B_last_V_1_vld_in) and (ap_const_logic_0 = B_last_V_1_ack_out) and (ap_const_lv2_3 = B_last_V_1_state)) or ((ap_const_logic_0 = B_last_V_1_ack_out) and (ap_const_lv2_1 = B_last_V_1_state)))) then 
                    B_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = B_last_V_1_vld_in) and (ap_const_lv2_2 = B_last_V_1_state)) or ((ap_const_logic_1 = B_last_V_1_ack_out) and (ap_const_lv2_1 = B_last_V_1_state)) or ((ap_const_lv2_3 = B_last_V_1_state) and not(((ap_const_logic_1 = B_last_V_1_vld_in) and (ap_const_logic_0 = B_last_V_1_ack_out))) and not(((ap_const_logic_0 = B_last_V_1_vld_in) and (ap_const_logic_1 = B_last_V_1_ack_out)))))) then 
                    B_last_V_1_state <= ap_const_lv2_3;
                else 
                    B_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_strb_V_1_ack_out) and (ap_const_logic_1 = B_strb_V_1_vld_out))) then 
                                        B_strb_V_1_sel_rd <= not(B_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_strb_V_1_vld_in) and (ap_const_logic_1 = B_strb_V_1_ack_in))) then 
                                        B_strb_V_1_sel_wr <= not(B_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = B_strb_V_1_vld_in) and (ap_const_logic_1 = B_strb_V_1_ack_out) and (ap_const_lv2_3 = B_strb_V_1_state)) or ((ap_const_logic_0 = B_strb_V_1_vld_in) and (ap_const_lv2_2 = B_strb_V_1_state)))) then 
                    B_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = B_strb_V_1_vld_in) and (ap_const_logic_0 = B_strb_V_1_ack_out) and (ap_const_lv2_3 = B_strb_V_1_state)) or ((ap_const_logic_0 = B_strb_V_1_ack_out) and (ap_const_lv2_1 = B_strb_V_1_state)))) then 
                    B_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = B_strb_V_1_vld_in) and (ap_const_lv2_2 = B_strb_V_1_state)) or ((ap_const_logic_1 = B_strb_V_1_ack_out) and (ap_const_lv2_1 = B_strb_V_1_state)) or ((ap_const_lv2_3 = B_strb_V_1_state) and not(((ap_const_logic_1 = B_strb_V_1_vld_in) and (ap_const_logic_0 = B_strb_V_1_ack_out))) and not(((ap_const_logic_0 = B_strb_V_1_vld_in) and (ap_const_logic_1 = B_strb_V_1_ack_out)))))) then 
                    B_strb_V_1_state <= ap_const_lv2_3;
                else 
                    B_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_user_V_1_ack_out) and (ap_const_logic_1 = B_user_V_1_vld_out))) then 
                                        B_user_V_1_sel_rd <= not(B_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_user_V_1_vld_in) and (ap_const_logic_1 = B_user_V_1_ack_in))) then 
                                        B_user_V_1_sel_wr <= not(B_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = B_user_V_1_vld_in) and (ap_const_logic_1 = B_user_V_1_ack_out) and (ap_const_lv2_3 = B_user_V_1_state)) or ((ap_const_logic_0 = B_user_V_1_vld_in) and (ap_const_lv2_2 = B_user_V_1_state)))) then 
                    B_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = B_user_V_1_vld_in) and (ap_const_logic_0 = B_user_V_1_ack_out) and (ap_const_lv2_3 = B_user_V_1_state)) or ((ap_const_logic_0 = B_user_V_1_ack_out) and (ap_const_lv2_1 = B_user_V_1_state)))) then 
                    B_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = B_user_V_1_vld_in) and (ap_const_lv2_2 = B_user_V_1_state)) or ((ap_const_logic_1 = B_user_V_1_ack_out) and (ap_const_lv2_1 = B_user_V_1_state)) or ((ap_const_lv2_3 = B_user_V_1_state) and not(((ap_const_logic_1 = B_user_V_1_vld_in) and (ap_const_logic_0 = B_user_V_1_ack_out))) and not(((ap_const_logic_0 = B_user_V_1_vld_in) and (ap_const_logic_1 = B_user_V_1_ack_out)))))) then 
                    B_user_V_1_state <= ap_const_lv2_3;
                else 
                    B_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_5_fu_207_p2))) then 
                i_fu_78 <= i_1_fu_227_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    match_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_1_reg_277))) then 
                match_reg_137 <= tmp_5_reg_311;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                match_reg_137 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    samples_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_5_fu_207_p2))) then 
                samples_fu_74 <= samples_1_fu_221_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                samples_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_data_V_0_load_A)) then
                A_data_V_0_payload_A <= A_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_data_V_0_load_B)) then
                A_data_V_0_payload_B <= A_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_dest_V_0_load_A)) then
                A_dest_V_0_payload_A <= A_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_dest_V_0_load_B)) then
                A_dest_V_0_payload_B <= A_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_id_V_0_load_A)) then
                A_id_V_0_payload_A <= A_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_id_V_0_load_B)) then
                A_id_V_0_payload_B <= A_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_keep_V_0_load_A)) then
                A_keep_V_0_payload_A <= A_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_keep_V_0_load_B)) then
                A_keep_V_0_payload_B <= A_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_strb_V_0_load_A)) then
                A_strb_V_0_payload_A <= A_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_strb_V_0_load_B)) then
                A_strb_V_0_payload_B <= A_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                A_temp_data_V_reg_281 <= A_data_V_0_data_out;
                A_temp_dest_V_reg_306 <= A_dest_V_0_data_out;
                A_temp_id_V_reg_301 <= A_id_V_0_data_out;
                A_temp_keep_V_reg_286 <= A_keep_V_0_data_out;
                A_temp_strb_V_reg_291 <= A_strb_V_0_data_out;
                A_temp_user_V_reg_296 <= A_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_5_fu_207_p2))) then
                A_temp_last_V_reg_316 <= A_temp_last_V_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_user_V_0_load_A)) then
                A_user_V_0_payload_A <= A_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_user_V_0_load_B)) then
                A_user_V_0_payload_B <= A_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_data_V_1_load_A)) then
                B_data_V_1_payload_A <= A_temp_data_V_reg_281;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_data_V_1_load_B)) then
                B_data_V_1_payload_B <= A_temp_data_V_reg_281;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_dest_V_1_load_A)) then
                B_dest_V_1_payload_A <= A_temp_dest_V_reg_306;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_dest_V_1_load_B)) then
                B_dest_V_1_payload_B <= A_temp_dest_V_reg_306;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_id_V_1_load_A)) then
                B_id_V_1_payload_A <= A_temp_id_V_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_id_V_1_load_B)) then
                B_id_V_1_payload_B <= A_temp_id_V_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_keep_V_1_load_A)) then
                B_keep_V_1_payload_A <= A_temp_keep_V_reg_286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_keep_V_1_load_B)) then
                B_keep_V_1_payload_B <= A_temp_keep_V_reg_286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_last_V_1_load_A)) then
                B_last_V_1_payload_A <= A_temp_last_V_reg_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_last_V_1_load_B)) then
                B_last_V_1_payload_B <= A_temp_last_V_reg_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_strb_V_1_load_A)) then
                B_strb_V_1_payload_A <= A_temp_strb_V_reg_291;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_strb_V_1_load_B)) then
                B_strb_V_1_payload_B <= A_temp_strb_V_reg_291;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_user_V_1_load_A)) then
                B_user_V_1_payload_A <= A_temp_user_V_reg_296;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_user_V_1_load_B)) then
                B_user_V_1_payload_B <= A_temp_user_V_reg_296;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_1_reg_277 <= tmp_1_reg_277;
                i_load_reg_272 <= i_fu_78;
                tmp_1_reg_277 <= tmp_1_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                data_compare_V_read_reg_261 <= data_compare_V;
                length_read_reg_256 <= length_r;
                tmp_reg_267 <= tmp_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                tmp_5_reg_311 <= tmp_5_fu_207_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, tmp_1_fu_168_p2, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage1_flag00011011, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_1_fu_168_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_1_fu_168_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_dest_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(A_data_V_0_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_flag00000000, tmp_1_reg_277)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_1_reg_277))) then 
            A_TDATA_blk_n <= A_data_V_0_state(0);
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_TREADY <= A_dest_V_0_state(1);
    A_data_V_0_ack_in <= A_data_V_0_state(1);

    A_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            A_data_V_0_ack_out <= ap_const_logic_1;
        else 
            A_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_data_V_0_data_out_assign_proc : process(A_data_V_0_payload_A, A_data_V_0_payload_B, A_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_data_V_0_sel)) then 
            A_data_V_0_data_out <= A_data_V_0_payload_B;
        else 
            A_data_V_0_data_out <= A_data_V_0_payload_A;
        end if; 
    end process;

    A_data_V_0_load_A <= (A_data_V_0_state_cmp_full and not(A_data_V_0_sel_wr));
    A_data_V_0_load_B <= (A_data_V_0_sel_wr and A_data_V_0_state_cmp_full);
    A_data_V_0_sel <= A_data_V_0_sel_rd;
    A_data_V_0_state_cmp_full <= '0' when (A_data_V_0_state = ap_const_lv2_1) else '1';
    A_data_V_0_vld_in <= A_TVALID;
    A_data_V_0_vld_out <= A_data_V_0_state(0);
    A_dest_V_0_ack_in <= A_dest_V_0_state(1);

    A_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            A_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            A_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_dest_V_0_data_out_assign_proc : process(A_dest_V_0_payload_A, A_dest_V_0_payload_B, A_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_dest_V_0_sel)) then 
            A_dest_V_0_data_out <= A_dest_V_0_payload_B;
        else 
            A_dest_V_0_data_out <= A_dest_V_0_payload_A;
        end if; 
    end process;

    A_dest_V_0_load_A <= (A_dest_V_0_state_cmp_full and not(A_dest_V_0_sel_wr));
    A_dest_V_0_load_B <= (A_dest_V_0_sel_wr and A_dest_V_0_state_cmp_full);
    A_dest_V_0_sel <= A_dest_V_0_sel_rd;
    A_dest_V_0_state_cmp_full <= '0' when (A_dest_V_0_state = ap_const_lv2_1) else '1';
    A_dest_V_0_vld_in <= A_TVALID;
    A_dest_V_0_vld_out <= A_dest_V_0_state(0);
    A_id_V_0_ack_in <= A_id_V_0_state(1);

    A_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            A_id_V_0_ack_out <= ap_const_logic_1;
        else 
            A_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_id_V_0_data_out_assign_proc : process(A_id_V_0_payload_A, A_id_V_0_payload_B, A_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_id_V_0_sel)) then 
            A_id_V_0_data_out <= A_id_V_0_payload_B;
        else 
            A_id_V_0_data_out <= A_id_V_0_payload_A;
        end if; 
    end process;

    A_id_V_0_load_A <= (A_id_V_0_state_cmp_full and not(A_id_V_0_sel_wr));
    A_id_V_0_load_B <= (A_id_V_0_sel_wr and A_id_V_0_state_cmp_full);
    A_id_V_0_sel <= A_id_V_0_sel_rd;
    A_id_V_0_state_cmp_full <= '0' when (A_id_V_0_state = ap_const_lv2_1) else '1';
    A_id_V_0_vld_in <= A_TVALID;
    A_id_V_0_vld_out <= A_id_V_0_state(0);
    A_keep_V_0_ack_in <= A_keep_V_0_state(1);

    A_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            A_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            A_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_keep_V_0_data_out_assign_proc : process(A_keep_V_0_payload_A, A_keep_V_0_payload_B, A_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_keep_V_0_sel)) then 
            A_keep_V_0_data_out <= A_keep_V_0_payload_B;
        else 
            A_keep_V_0_data_out <= A_keep_V_0_payload_A;
        end if; 
    end process;

    A_keep_V_0_load_A <= (A_keep_V_0_state_cmp_full and not(A_keep_V_0_sel_wr));
    A_keep_V_0_load_B <= (A_keep_V_0_sel_wr and A_keep_V_0_state_cmp_full);
    A_keep_V_0_sel <= A_keep_V_0_sel_rd;
    A_keep_V_0_state_cmp_full <= '0' when (A_keep_V_0_state = ap_const_lv2_1) else '1';
    A_keep_V_0_vld_in <= A_TVALID;
    A_keep_V_0_vld_out <= A_keep_V_0_state(0);
    A_strb_V_0_ack_in <= A_strb_V_0_state(1);

    A_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            A_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            A_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_strb_V_0_data_out_assign_proc : process(A_strb_V_0_payload_A, A_strb_V_0_payload_B, A_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_strb_V_0_sel)) then 
            A_strb_V_0_data_out <= A_strb_V_0_payload_B;
        else 
            A_strb_V_0_data_out <= A_strb_V_0_payload_A;
        end if; 
    end process;

    A_strb_V_0_load_A <= (A_strb_V_0_state_cmp_full and not(A_strb_V_0_sel_wr));
    A_strb_V_0_load_B <= (A_strb_V_0_sel_wr and A_strb_V_0_state_cmp_full);
    A_strb_V_0_sel <= A_strb_V_0_sel_rd;
    A_strb_V_0_state_cmp_full <= '0' when (A_strb_V_0_state = ap_const_lv2_1) else '1';
    A_strb_V_0_vld_in <= A_TVALID;
    A_strb_V_0_vld_out <= A_strb_V_0_state(0);
    A_temp_last_V_fu_216_p2 <= "1" when (samples_fu_74 = tmp_reg_267) else "0";
    A_user_V_0_ack_in <= A_user_V_0_state(1);

    A_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            A_user_V_0_ack_out <= ap_const_logic_1;
        else 
            A_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_user_V_0_data_out_assign_proc : process(A_user_V_0_payload_A, A_user_V_0_payload_B, A_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_user_V_0_sel)) then 
            A_user_V_0_data_out <= A_user_V_0_payload_B;
        else 
            A_user_V_0_data_out <= A_user_V_0_payload_A;
        end if; 
    end process;

    A_user_V_0_load_A <= (A_user_V_0_state_cmp_full and not(A_user_V_0_sel_wr));
    A_user_V_0_load_B <= (A_user_V_0_sel_wr and A_user_V_0_state_cmp_full);
    A_user_V_0_sel <= A_user_V_0_sel_rd;
    A_user_V_0_state_cmp_full <= '0' when (A_user_V_0_state = ap_const_lv2_1) else '1';
    A_user_V_0_vld_in <= A_TVALID;
    A_user_V_0_vld_out <= A_user_V_0_state(0);
    B_TDATA <= B_data_V_1_data_out;

    B_TDATA_blk_n_assign_proc : process(B_data_V_1_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_5_reg_311)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_5_reg_311)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311)))) then 
            B_TDATA_blk_n <= B_data_V_1_state(1);
        else 
            B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_TDEST <= B_dest_V_1_data_out;
    B_TID <= B_id_V_1_data_out;
    B_TKEEP <= B_keep_V_1_data_out;
    B_TLAST <= B_last_V_1_data_out;
    B_TSTRB <= B_strb_V_1_data_out;
    B_TUSER <= B_user_V_1_data_out;
    B_TVALID <= B_dest_V_1_state(0);
    B_data_V_1_ack_in <= B_data_V_1_state(1);
    B_data_V_1_ack_out <= B_TREADY;

    B_data_V_1_data_out_assign_proc : process(B_data_V_1_payload_A, B_data_V_1_payload_B, B_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_data_V_1_sel)) then 
            B_data_V_1_data_out <= B_data_V_1_payload_B;
        else 
            B_data_V_1_data_out <= B_data_V_1_payload_A;
        end if; 
    end process;

    B_data_V_1_load_A <= (B_data_V_1_state_cmp_full and not(B_data_V_1_sel_wr));
    B_data_V_1_load_B <= (B_data_V_1_sel_wr and B_data_V_1_state_cmp_full);
    B_data_V_1_sel <= B_data_V_1_sel_rd;
    B_data_V_1_state_cmp_full <= '0' when (B_data_V_1_state = ap_const_lv2_1) else '1';

    B_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_311, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            B_data_V_1_vld_in <= ap_const_logic_1;
        else 
            B_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_data_V_1_vld_out <= B_data_V_1_state(0);
    B_dest_V_1_ack_in <= B_dest_V_1_state(1);
    B_dest_V_1_ack_out <= B_TREADY;

    B_dest_V_1_data_out_assign_proc : process(B_dest_V_1_payload_A, B_dest_V_1_payload_B, B_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_dest_V_1_sel)) then 
            B_dest_V_1_data_out <= B_dest_V_1_payload_B;
        else 
            B_dest_V_1_data_out <= B_dest_V_1_payload_A;
        end if; 
    end process;

    B_dest_V_1_load_A <= (B_dest_V_1_state_cmp_full and not(B_dest_V_1_sel_wr));
    B_dest_V_1_load_B <= (B_dest_V_1_sel_wr and B_dest_V_1_state_cmp_full);
    B_dest_V_1_sel <= B_dest_V_1_sel_rd;
    B_dest_V_1_state_cmp_full <= '0' when (B_dest_V_1_state = ap_const_lv2_1) else '1';

    B_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_311, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            B_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            B_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_dest_V_1_vld_out <= B_dest_V_1_state(0);
    B_id_V_1_ack_in <= B_id_V_1_state(1);
    B_id_V_1_ack_out <= B_TREADY;

    B_id_V_1_data_out_assign_proc : process(B_id_V_1_payload_A, B_id_V_1_payload_B, B_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_id_V_1_sel)) then 
            B_id_V_1_data_out <= B_id_V_1_payload_B;
        else 
            B_id_V_1_data_out <= B_id_V_1_payload_A;
        end if; 
    end process;

    B_id_V_1_load_A <= (B_id_V_1_state_cmp_full and not(B_id_V_1_sel_wr));
    B_id_V_1_load_B <= (B_id_V_1_sel_wr and B_id_V_1_state_cmp_full);
    B_id_V_1_sel <= B_id_V_1_sel_rd;
    B_id_V_1_state_cmp_full <= '0' when (B_id_V_1_state = ap_const_lv2_1) else '1';

    B_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_311, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            B_id_V_1_vld_in <= ap_const_logic_1;
        else 
            B_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_id_V_1_vld_out <= B_id_V_1_state(0);
    B_keep_V_1_ack_in <= B_keep_V_1_state(1);
    B_keep_V_1_ack_out <= B_TREADY;

    B_keep_V_1_data_out_assign_proc : process(B_keep_V_1_payload_A, B_keep_V_1_payload_B, B_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_keep_V_1_sel)) then 
            B_keep_V_1_data_out <= B_keep_V_1_payload_B;
        else 
            B_keep_V_1_data_out <= B_keep_V_1_payload_A;
        end if; 
    end process;

    B_keep_V_1_load_A <= (B_keep_V_1_state_cmp_full and not(B_keep_V_1_sel_wr));
    B_keep_V_1_load_B <= (B_keep_V_1_sel_wr and B_keep_V_1_state_cmp_full);
    B_keep_V_1_sel <= B_keep_V_1_sel_rd;
    B_keep_V_1_state_cmp_full <= '0' when (B_keep_V_1_state = ap_const_lv2_1) else '1';

    B_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_311, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            B_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            B_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_keep_V_1_vld_out <= B_keep_V_1_state(0);
    B_last_V_1_ack_in <= B_last_V_1_state(1);
    B_last_V_1_ack_out <= B_TREADY;

    B_last_V_1_data_out_assign_proc : process(B_last_V_1_payload_A, B_last_V_1_payload_B, B_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_last_V_1_sel)) then 
            B_last_V_1_data_out <= B_last_V_1_payload_B;
        else 
            B_last_V_1_data_out <= B_last_V_1_payload_A;
        end if; 
    end process;

    B_last_V_1_load_A <= (B_last_V_1_state_cmp_full and not(B_last_V_1_sel_wr));
    B_last_V_1_load_B <= (B_last_V_1_sel_wr and B_last_V_1_state_cmp_full);
    B_last_V_1_sel <= B_last_V_1_sel_rd;
    B_last_V_1_state_cmp_full <= '0' when (B_last_V_1_state = ap_const_lv2_1) else '1';

    B_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_311, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            B_last_V_1_vld_in <= ap_const_logic_1;
        else 
            B_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_last_V_1_vld_out <= B_last_V_1_state(0);
    B_strb_V_1_ack_in <= B_strb_V_1_state(1);
    B_strb_V_1_ack_out <= B_TREADY;

    B_strb_V_1_data_out_assign_proc : process(B_strb_V_1_payload_A, B_strb_V_1_payload_B, B_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_strb_V_1_sel)) then 
            B_strb_V_1_data_out <= B_strb_V_1_payload_B;
        else 
            B_strb_V_1_data_out <= B_strb_V_1_payload_A;
        end if; 
    end process;

    B_strb_V_1_load_A <= (B_strb_V_1_state_cmp_full and not(B_strb_V_1_sel_wr));
    B_strb_V_1_load_B <= (B_strb_V_1_sel_wr and B_strb_V_1_state_cmp_full);
    B_strb_V_1_sel <= B_strb_V_1_sel_rd;
    B_strb_V_1_state_cmp_full <= '0' when (B_strb_V_1_state = ap_const_lv2_1) else '1';

    B_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_311, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            B_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            B_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_strb_V_1_vld_out <= B_strb_V_1_state(0);
    B_user_V_1_ack_in <= B_user_V_1_state(1);
    B_user_V_1_ack_out <= B_TREADY;

    B_user_V_1_data_out_assign_proc : process(B_user_V_1_payload_A, B_user_V_1_payload_B, B_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_user_V_1_sel)) then 
            B_user_V_1_data_out <= B_user_V_1_payload_B;
        else 
            B_user_V_1_data_out <= B_user_V_1_payload_A;
        end if; 
    end process;

    B_user_V_1_load_A <= (B_user_V_1_state_cmp_full and not(B_user_V_1_sel_wr));
    B_user_V_1_load_B <= (B_user_V_1_sel_wr and B_user_V_1_state_cmp_full);
    B_user_V_1_sel <= B_user_V_1_sel_rd;
    B_user_V_1_state_cmp_full <= '0' when (B_user_V_1_state = ap_const_lv2_1) else '1';

    B_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_311, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_5_reg_311) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            B_user_V_1_vld_in <= ap_const_logic_1;
        else 
            B_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_user_V_1_vld_out <= B_user_V_1_state(0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;

        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_flag00001001_assign_proc : process(A_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_1_reg_277)
    begin
                ap_block_pp0_stage1_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_const_logic_0 = A_data_V_0_vld_out));
    end process;


    ap_block_pp0_stage1_flag00011001_assign_proc : process(A_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_enable_reg_pp0_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage1_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_const_logic_0 = A_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage1_flag00011011_assign_proc : process(A_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_1_reg_277, ap_enable_reg_pp0_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage1_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_1_reg_277) and (ap_const_logic_0 = A_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(A_data_V_0_vld_out, tmp_1_reg_277)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((ap_const_lv1_1 = tmp_1_reg_277) and (ap_const_logic_0 = A_data_V_0_vld_out));
    end process;


    ap_block_state4_io_assign_proc : process(B_data_V_1_ack_in, tmp_5_reg_311)
    begin
                ap_block_state4_io <= ((ap_const_lv1_1 = tmp_5_reg_311) and (ap_const_logic_0 = B_data_V_1_ack_in));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(B_data_V_1_ack_in, tmp_5_reg_311)
    begin
                ap_block_state5_io <= ((ap_const_lv1_1 = tmp_5_reg_311) and (ap_const_logic_0 = B_data_V_1_ack_in));
    end process;

        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in)
    begin
                ap_block_state6 <= ((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_dest_V_1_ack_in));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_1_fu_168_p2)
    begin
        if ((ap_const_lv1_0 = tmp_1_fu_168_p2)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_dest_V_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_dest_V_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_1_fu_227_p2 <= std_logic_vector(unsigned(i_load_reg_272) + unsigned(ap_const_lv32_1));

    match_phi_fu_141_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, ap_enable_reg_pp0_iter1, tmp_5_reg_311, match_reg_137, ap_reg_pp0_iter1_tmp_1_reg_277)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_1_reg_277))) then 
            match_phi_fu_141_p4 <= tmp_5_reg_311;
        else 
            match_phi_fu_141_p4 <= match_reg_137;
        end if; 
    end process;

    samples_1_fu_221_p2 <= std_logic_vector(unsigned(samples_fu_74) + unsigned(ap_const_lv32_1));
    tmp_1_fu_168_p2 <= "1" when (signed(i_fu_78) < signed(length_read_reg_256)) else "0";
    tmp_3_fu_197_p2 <= (A_data_V_0_data_out and data_compare_V_read_reg_261);
    tmp_4_fu_202_p2 <= "1" when (tmp_3_fu_197_p2 = data_compare_V_read_reg_261) else "0";
    tmp_5_fu_207_p2 <= (tmp_4_fu_202_p2 or match_phi_fu_141_p4);
    tmp_fu_149_p2 <= std_logic_vector(unsigned(length_r) + unsigned(ap_const_lv32_FFFFFFFF));
end behav;
