// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="trace_cntrl_64,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.404000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1119,HLS_SYN_LUT=914}" *)

module trace_cntrl_64 (
        ap_clk,
        ap_rst_n,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST,
        B_TDATA,
        B_TVALID,
        B_TREADY,
        B_TKEEP,
        B_TSTRB,
        B_TUSER,
        B_TLAST,
        B_TID,
        B_TDEST,
        s_axi_trace_cntrl_AWVALID,
        s_axi_trace_cntrl_AWREADY,
        s_axi_trace_cntrl_AWADDR,
        s_axi_trace_cntrl_WVALID,
        s_axi_trace_cntrl_WREADY,
        s_axi_trace_cntrl_WDATA,
        s_axi_trace_cntrl_WSTRB,
        s_axi_trace_cntrl_ARVALID,
        s_axi_trace_cntrl_ARREADY,
        s_axi_trace_cntrl_ARADDR,
        s_axi_trace_cntrl_RVALID,
        s_axi_trace_cntrl_RREADY,
        s_axi_trace_cntrl_RDATA,
        s_axi_trace_cntrl_RRESP,
        s_axi_trace_cntrl_BVALID,
        s_axi_trace_cntrl_BREADY,
        s_axi_trace_cntrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;
parameter    C_S_AXI_TRACE_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_TRACE_CNTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_TRACE_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [7:0] A_TKEEP;
input  [7:0] A_TSTRB;
input  [0:0] A_TUSER;
input  [0:0] A_TLAST;
input  [0:0] A_TID;
input  [0:0] A_TDEST;
output  [63:0] B_TDATA;
output   B_TVALID;
input   B_TREADY;
output  [7:0] B_TKEEP;
output  [7:0] B_TSTRB;
output  [0:0] B_TUSER;
output  [0:0] B_TLAST;
output  [0:0] B_TID;
output  [0:0] B_TDEST;
input   s_axi_trace_cntrl_AWVALID;
output   s_axi_trace_cntrl_AWREADY;
input  [C_S_AXI_TRACE_CNTRL_ADDR_WIDTH - 1:0] s_axi_trace_cntrl_AWADDR;
input   s_axi_trace_cntrl_WVALID;
output   s_axi_trace_cntrl_WREADY;
input  [C_S_AXI_TRACE_CNTRL_DATA_WIDTH - 1:0] s_axi_trace_cntrl_WDATA;
input  [C_S_AXI_TRACE_CNTRL_WSTRB_WIDTH - 1:0] s_axi_trace_cntrl_WSTRB;
input   s_axi_trace_cntrl_ARVALID;
output   s_axi_trace_cntrl_ARREADY;
input  [C_S_AXI_TRACE_CNTRL_ADDR_WIDTH - 1:0] s_axi_trace_cntrl_ARADDR;
output   s_axi_trace_cntrl_RVALID;
input   s_axi_trace_cntrl_RREADY;
output  [C_S_AXI_TRACE_CNTRL_DATA_WIDTH - 1:0] s_axi_trace_cntrl_RDATA;
output  [1:0] s_axi_trace_cntrl_RRESP;
output   s_axi_trace_cntrl_BVALID;
input   s_axi_trace_cntrl_BREADY;
output  [1:0] s_axi_trace_cntrl_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] A_data_V_0_data_out;
wire    A_data_V_0_vld_in;
wire    A_data_V_0_vld_out;
wire    A_data_V_0_ack_in;
reg    A_data_V_0_ack_out;
reg   [63:0] A_data_V_0_payload_A;
reg   [63:0] A_data_V_0_payload_B;
reg    A_data_V_0_sel_rd;
reg    A_data_V_0_sel_wr;
wire    A_data_V_0_sel;
wire    A_data_V_0_load_A;
wire    A_data_V_0_load_B;
reg   [1:0] A_data_V_0_state;
wire    A_data_V_0_state_cmp_full;
reg   [7:0] A_keep_V_0_data_out;
wire    A_keep_V_0_vld_in;
wire    A_keep_V_0_vld_out;
wire    A_keep_V_0_ack_in;
reg    A_keep_V_0_ack_out;
reg   [7:0] A_keep_V_0_payload_A;
reg   [7:0] A_keep_V_0_payload_B;
reg    A_keep_V_0_sel_rd;
reg    A_keep_V_0_sel_wr;
wire    A_keep_V_0_sel;
wire    A_keep_V_0_load_A;
wire    A_keep_V_0_load_B;
reg   [1:0] A_keep_V_0_state;
wire    A_keep_V_0_state_cmp_full;
reg   [7:0] A_strb_V_0_data_out;
wire    A_strb_V_0_vld_in;
wire    A_strb_V_0_vld_out;
wire    A_strb_V_0_ack_in;
reg    A_strb_V_0_ack_out;
reg   [7:0] A_strb_V_0_payload_A;
reg   [7:0] A_strb_V_0_payload_B;
reg    A_strb_V_0_sel_rd;
reg    A_strb_V_0_sel_wr;
wire    A_strb_V_0_sel;
wire    A_strb_V_0_load_A;
wire    A_strb_V_0_load_B;
reg   [1:0] A_strb_V_0_state;
wire    A_strb_V_0_state_cmp_full;
reg   [0:0] A_user_V_0_data_out;
wire    A_user_V_0_vld_in;
wire    A_user_V_0_vld_out;
wire    A_user_V_0_ack_in;
reg    A_user_V_0_ack_out;
reg   [0:0] A_user_V_0_payload_A;
reg   [0:0] A_user_V_0_payload_B;
reg    A_user_V_0_sel_rd;
reg    A_user_V_0_sel_wr;
wire    A_user_V_0_sel;
wire    A_user_V_0_load_A;
wire    A_user_V_0_load_B;
reg   [1:0] A_user_V_0_state;
wire    A_user_V_0_state_cmp_full;
reg   [0:0] A_id_V_0_data_out;
wire    A_id_V_0_vld_in;
wire    A_id_V_0_vld_out;
wire    A_id_V_0_ack_in;
reg    A_id_V_0_ack_out;
reg   [0:0] A_id_V_0_payload_A;
reg   [0:0] A_id_V_0_payload_B;
reg    A_id_V_0_sel_rd;
reg    A_id_V_0_sel_wr;
wire    A_id_V_0_sel;
wire    A_id_V_0_load_A;
wire    A_id_V_0_load_B;
reg   [1:0] A_id_V_0_state;
wire    A_id_V_0_state_cmp_full;
reg   [0:0] A_dest_V_0_data_out;
wire    A_dest_V_0_vld_in;
wire    A_dest_V_0_vld_out;
wire    A_dest_V_0_ack_in;
reg    A_dest_V_0_ack_out;
reg   [0:0] A_dest_V_0_payload_A;
reg   [0:0] A_dest_V_0_payload_B;
reg    A_dest_V_0_sel_rd;
reg    A_dest_V_0_sel_wr;
wire    A_dest_V_0_sel;
wire    A_dest_V_0_load_A;
wire    A_dest_V_0_load_B;
reg   [1:0] A_dest_V_0_state;
wire    A_dest_V_0_state_cmp_full;
reg   [63:0] B_data_V_1_data_out;
reg    B_data_V_1_vld_in;
wire    B_data_V_1_vld_out;
wire    B_data_V_1_ack_in;
wire    B_data_V_1_ack_out;
reg   [63:0] B_data_V_1_payload_A;
reg   [63:0] B_data_V_1_payload_B;
reg    B_data_V_1_sel_rd;
reg    B_data_V_1_sel_wr;
wire    B_data_V_1_sel;
wire    B_data_V_1_load_A;
wire    B_data_V_1_load_B;
reg   [1:0] B_data_V_1_state;
wire    B_data_V_1_state_cmp_full;
reg   [7:0] B_keep_V_1_data_out;
reg    B_keep_V_1_vld_in;
wire    B_keep_V_1_vld_out;
wire    B_keep_V_1_ack_in;
wire    B_keep_V_1_ack_out;
reg   [7:0] B_keep_V_1_payload_A;
reg   [7:0] B_keep_V_1_payload_B;
reg    B_keep_V_1_sel_rd;
reg    B_keep_V_1_sel_wr;
wire    B_keep_V_1_sel;
wire    B_keep_V_1_load_A;
wire    B_keep_V_1_load_B;
reg   [1:0] B_keep_V_1_state;
wire    B_keep_V_1_state_cmp_full;
reg   [7:0] B_strb_V_1_data_out;
reg    B_strb_V_1_vld_in;
wire    B_strb_V_1_vld_out;
wire    B_strb_V_1_ack_in;
wire    B_strb_V_1_ack_out;
reg   [7:0] B_strb_V_1_payload_A;
reg   [7:0] B_strb_V_1_payload_B;
reg    B_strb_V_1_sel_rd;
reg    B_strb_V_1_sel_wr;
wire    B_strb_V_1_sel;
wire    B_strb_V_1_load_A;
wire    B_strb_V_1_load_B;
reg   [1:0] B_strb_V_1_state;
wire    B_strb_V_1_state_cmp_full;
reg   [0:0] B_user_V_1_data_out;
reg    B_user_V_1_vld_in;
wire    B_user_V_1_vld_out;
wire    B_user_V_1_ack_in;
wire    B_user_V_1_ack_out;
reg   [0:0] B_user_V_1_payload_A;
reg   [0:0] B_user_V_1_payload_B;
reg    B_user_V_1_sel_rd;
reg    B_user_V_1_sel_wr;
wire    B_user_V_1_sel;
wire    B_user_V_1_load_A;
wire    B_user_V_1_load_B;
reg   [1:0] B_user_V_1_state;
wire    B_user_V_1_state_cmp_full;
reg   [0:0] B_last_V_1_data_out;
reg    B_last_V_1_vld_in;
wire    B_last_V_1_vld_out;
wire    B_last_V_1_ack_in;
wire    B_last_V_1_ack_out;
reg   [0:0] B_last_V_1_payload_A;
reg   [0:0] B_last_V_1_payload_B;
reg    B_last_V_1_sel_rd;
reg    B_last_V_1_sel_wr;
wire    B_last_V_1_sel;
wire    B_last_V_1_load_A;
wire    B_last_V_1_load_B;
reg   [1:0] B_last_V_1_state;
wire    B_last_V_1_state_cmp_full;
reg   [0:0] B_id_V_1_data_out;
reg    B_id_V_1_vld_in;
wire    B_id_V_1_vld_out;
wire    B_id_V_1_ack_in;
wire    B_id_V_1_ack_out;
reg   [0:0] B_id_V_1_payload_A;
reg   [0:0] B_id_V_1_payload_B;
reg    B_id_V_1_sel_rd;
reg    B_id_V_1_sel_wr;
wire    B_id_V_1_sel;
wire    B_id_V_1_load_A;
wire    B_id_V_1_load_B;
reg   [1:0] B_id_V_1_state;
wire    B_id_V_1_state_cmp_full;
reg   [0:0] B_dest_V_1_data_out;
reg    B_dest_V_1_vld_in;
wire    B_dest_V_1_vld_out;
wire    B_dest_V_1_ack_in;
wire    B_dest_V_1_ack_out;
reg   [0:0] B_dest_V_1_payload_A;
reg   [0:0] B_dest_V_1_payload_B;
reg    B_dest_V_1_sel_rd;
reg    B_dest_V_1_sel_wr;
wire    B_dest_V_1_sel;
wire    B_dest_V_1_load_A;
wire    B_dest_V_1_load_B;
reg   [1:0] B_dest_V_1_state;
wire    B_dest_V_1_state_cmp_full;
wire   [63:0] data_compare_V;
wire   [31:0] length_r;
reg    A_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1_flag00000000;
reg   [0:0] tmp_1_reg_287;
reg    B_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] tmp_7_reg_321;
reg   [0:0] match_reg_139;
reg   [31:0] length_read_reg_266;
wire   [31:0] tmp_fu_151_p2;
reg   [31:0] tmp_reg_271;
wire   [31:0] tmp_2_fu_157_p1;
reg   [31:0] tmp_2_reg_276;
reg   [31:0] i_load_reg_282;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [0:0] tmp_1_fu_174_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_1_reg_287;
reg   [63:0] A_temp_data_V_reg_291;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage1_flag00011001;
reg   [7:0] A_temp_keep_V_reg_296;
reg   [7:0] A_temp_strb_V_reg_301;
reg   [0:0] A_temp_user_V_reg_306;
reg   [0:0] A_temp_id_V_reg_311;
reg   [0:0] A_temp_dest_V_reg_316;
wire   [0:0] tmp_7_fu_217_p2;
wire   [0:0] A_temp_last_V_fu_226_p2;
reg   [0:0] A_temp_last_V_reg_326;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_flag00011011;
reg   [0:0] match_phi_fu_143_p4;
reg   [31:0] samples_fu_76;
wire   [31:0] samples_1_fu_231_p2;
reg   [31:0] i_fu_80;
wire   [31:0] i_1_fu_237_p2;
wire    ap_block_pp0_stage0_flag00001001;
reg    ap_block_pp0_stage1_flag00001001;
wire   [31:0] tmp_3_fu_203_p1;
wire   [31:0] tmp_5_fu_207_p2;
wire   [0:0] tmp_6_fu_212_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 A_data_V_0_sel_rd = 1'b0;
#0 A_data_V_0_sel_wr = 1'b0;
#0 A_data_V_0_state = 2'd0;
#0 A_keep_V_0_sel_rd = 1'b0;
#0 A_keep_V_0_sel_wr = 1'b0;
#0 A_keep_V_0_state = 2'd0;
#0 A_strb_V_0_sel_rd = 1'b0;
#0 A_strb_V_0_sel_wr = 1'b0;
#0 A_strb_V_0_state = 2'd0;
#0 A_user_V_0_sel_rd = 1'b0;
#0 A_user_V_0_sel_wr = 1'b0;
#0 A_user_V_0_state = 2'd0;
#0 A_id_V_0_sel_rd = 1'b0;
#0 A_id_V_0_sel_wr = 1'b0;
#0 A_id_V_0_state = 2'd0;
#0 A_dest_V_0_sel_rd = 1'b0;
#0 A_dest_V_0_sel_wr = 1'b0;
#0 A_dest_V_0_state = 2'd0;
#0 B_data_V_1_sel_rd = 1'b0;
#0 B_data_V_1_sel_wr = 1'b0;
#0 B_data_V_1_state = 2'd0;
#0 B_keep_V_1_sel_rd = 1'b0;
#0 B_keep_V_1_sel_wr = 1'b0;
#0 B_keep_V_1_state = 2'd0;
#0 B_strb_V_1_sel_rd = 1'b0;
#0 B_strb_V_1_sel_wr = 1'b0;
#0 B_strb_V_1_state = 2'd0;
#0 B_user_V_1_sel_rd = 1'b0;
#0 B_user_V_1_sel_wr = 1'b0;
#0 B_user_V_1_state = 2'd0;
#0 B_last_V_1_sel_rd = 1'b0;
#0 B_last_V_1_sel_wr = 1'b0;
#0 B_last_V_1_state = 2'd0;
#0 B_id_V_1_sel_rd = 1'b0;
#0 B_id_V_1_sel_wr = 1'b0;
#0 B_id_V_1_state = 2'd0;
#0 B_dest_V_1_sel_rd = 1'b0;
#0 B_dest_V_1_sel_wr = 1'b0;
#0 B_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

trace_cntrl_64_trace_cntrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TRACE_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TRACE_CNTRL_DATA_WIDTH ))
trace_cntrl_64_trace_cntrl_s_axi_U(
    .AWVALID(s_axi_trace_cntrl_AWVALID),
    .AWREADY(s_axi_trace_cntrl_AWREADY),
    .AWADDR(s_axi_trace_cntrl_AWADDR),
    .WVALID(s_axi_trace_cntrl_WVALID),
    .WREADY(s_axi_trace_cntrl_WREADY),
    .WDATA(s_axi_trace_cntrl_WDATA),
    .WSTRB(s_axi_trace_cntrl_WSTRB),
    .ARVALID(s_axi_trace_cntrl_ARVALID),
    .ARREADY(s_axi_trace_cntrl_ARREADY),
    .ARADDR(s_axi_trace_cntrl_ARADDR),
    .RVALID(s_axi_trace_cntrl_RVALID),
    .RREADY(s_axi_trace_cntrl_RREADY),
    .RDATA(s_axi_trace_cntrl_RDATA),
    .RRESP(s_axi_trace_cntrl_RRESP),
    .BVALID(s_axi_trace_cntrl_BVALID),
    .BREADY(s_axi_trace_cntrl_BREADY),
    .BRESP(s_axi_trace_cntrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .data_compare_V(data_compare_V),
    .length_r(length_r)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_data_V_0_ack_out) & (1'b1 == A_data_V_0_vld_out))) begin
            A_data_V_0_sel_rd <= ~A_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_data_V_0_vld_in) & (1'b1 == A_data_V_0_ack_in))) begin
            A_data_V_0_sel_wr <= ~A_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == A_data_V_0_vld_in) & (1'b1 == A_data_V_0_ack_out) & (A_data_V_0_state == 2'd3)) | ((1'b0 == A_data_V_0_vld_in) & (A_data_V_0_state == 2'd2)))) begin
            A_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == A_data_V_0_vld_in) & (1'b0 == A_data_V_0_ack_out) & (A_data_V_0_state == 2'd3)) | ((1'b0 == A_data_V_0_ack_out) & (A_data_V_0_state == 2'd1)))) begin
            A_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == A_data_V_0_vld_in) & (A_data_V_0_state == 2'd2)) | ((1'b1 == A_data_V_0_ack_out) & (A_data_V_0_state == 2'd1)) | ((A_data_V_0_state == 2'd3) & ~((1'b1 == A_data_V_0_vld_in) & (1'b0 == A_data_V_0_ack_out)) & ~((1'b0 == A_data_V_0_vld_in) & (1'b1 == A_data_V_0_ack_out))))) begin
            A_data_V_0_state <= 2'd3;
        end else begin
            A_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_dest_V_0_ack_out) & (1'b1 == A_dest_V_0_vld_out))) begin
            A_dest_V_0_sel_rd <= ~A_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_dest_V_0_vld_in) & (1'b1 == A_dest_V_0_ack_in))) begin
            A_dest_V_0_sel_wr <= ~A_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == A_dest_V_0_vld_in) & (1'b1 == A_dest_V_0_ack_out) & (2'd3 == A_dest_V_0_state)) | ((1'b0 == A_dest_V_0_vld_in) & (2'd2 == A_dest_V_0_state)))) begin
            A_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == A_dest_V_0_vld_in) & (1'b0 == A_dest_V_0_ack_out) & (2'd3 == A_dest_V_0_state)) | ((1'b0 == A_dest_V_0_ack_out) & (2'd1 == A_dest_V_0_state)))) begin
            A_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == A_dest_V_0_vld_in) & (2'd2 == A_dest_V_0_state)) | ((1'b1 == A_dest_V_0_ack_out) & (2'd1 == A_dest_V_0_state)) | ((2'd3 == A_dest_V_0_state) & ~((1'b1 == A_dest_V_0_vld_in) & (1'b0 == A_dest_V_0_ack_out)) & ~((1'b0 == A_dest_V_0_vld_in) & (1'b1 == A_dest_V_0_ack_out))))) begin
            A_dest_V_0_state <= 2'd3;
        end else begin
            A_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_id_V_0_ack_out) & (1'b1 == A_id_V_0_vld_out))) begin
            A_id_V_0_sel_rd <= ~A_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_id_V_0_vld_in) & (1'b1 == A_id_V_0_ack_in))) begin
            A_id_V_0_sel_wr <= ~A_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == A_id_V_0_vld_in) & (1'b1 == A_id_V_0_ack_out) & (2'd3 == A_id_V_0_state)) | ((1'b0 == A_id_V_0_vld_in) & (2'd2 == A_id_V_0_state)))) begin
            A_id_V_0_state <= 2'd2;
        end else if ((((1'b1 == A_id_V_0_vld_in) & (1'b0 == A_id_V_0_ack_out) & (2'd3 == A_id_V_0_state)) | ((1'b0 == A_id_V_0_ack_out) & (2'd1 == A_id_V_0_state)))) begin
            A_id_V_0_state <= 2'd1;
        end else if ((((1'b1 == A_id_V_0_vld_in) & (2'd2 == A_id_V_0_state)) | ((1'b1 == A_id_V_0_ack_out) & (2'd1 == A_id_V_0_state)) | ((2'd3 == A_id_V_0_state) & ~((1'b1 == A_id_V_0_vld_in) & (1'b0 == A_id_V_0_ack_out)) & ~((1'b0 == A_id_V_0_vld_in) & (1'b1 == A_id_V_0_ack_out))))) begin
            A_id_V_0_state <= 2'd3;
        end else begin
            A_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_keep_V_0_ack_out) & (1'b1 == A_keep_V_0_vld_out))) begin
            A_keep_V_0_sel_rd <= ~A_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_keep_V_0_vld_in) & (1'b1 == A_keep_V_0_ack_in))) begin
            A_keep_V_0_sel_wr <= ~A_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == A_keep_V_0_vld_in) & (1'b1 == A_keep_V_0_ack_out) & (2'd3 == A_keep_V_0_state)) | ((1'b0 == A_keep_V_0_vld_in) & (2'd2 == A_keep_V_0_state)))) begin
            A_keep_V_0_state <= 2'd2;
        end else if ((((1'b1 == A_keep_V_0_vld_in) & (1'b0 == A_keep_V_0_ack_out) & (2'd3 == A_keep_V_0_state)) | ((1'b0 == A_keep_V_0_ack_out) & (2'd1 == A_keep_V_0_state)))) begin
            A_keep_V_0_state <= 2'd1;
        end else if ((((1'b1 == A_keep_V_0_vld_in) & (2'd2 == A_keep_V_0_state)) | ((1'b1 == A_keep_V_0_ack_out) & (2'd1 == A_keep_V_0_state)) | ((2'd3 == A_keep_V_0_state) & ~((1'b1 == A_keep_V_0_vld_in) & (1'b0 == A_keep_V_0_ack_out)) & ~((1'b0 == A_keep_V_0_vld_in) & (1'b1 == A_keep_V_0_ack_out))))) begin
            A_keep_V_0_state <= 2'd3;
        end else begin
            A_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_strb_V_0_ack_out) & (1'b1 == A_strb_V_0_vld_out))) begin
            A_strb_V_0_sel_rd <= ~A_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_strb_V_0_vld_in) & (1'b1 == A_strb_V_0_ack_in))) begin
            A_strb_V_0_sel_wr <= ~A_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == A_strb_V_0_vld_in) & (1'b1 == A_strb_V_0_ack_out) & (2'd3 == A_strb_V_0_state)) | ((1'b0 == A_strb_V_0_vld_in) & (2'd2 == A_strb_V_0_state)))) begin
            A_strb_V_0_state <= 2'd2;
        end else if ((((1'b1 == A_strb_V_0_vld_in) & (1'b0 == A_strb_V_0_ack_out) & (2'd3 == A_strb_V_0_state)) | ((1'b0 == A_strb_V_0_ack_out) & (2'd1 == A_strb_V_0_state)))) begin
            A_strb_V_0_state <= 2'd1;
        end else if ((((1'b1 == A_strb_V_0_vld_in) & (2'd2 == A_strb_V_0_state)) | ((1'b1 == A_strb_V_0_ack_out) & (2'd1 == A_strb_V_0_state)) | ((2'd3 == A_strb_V_0_state) & ~((1'b1 == A_strb_V_0_vld_in) & (1'b0 == A_strb_V_0_ack_out)) & ~((1'b0 == A_strb_V_0_vld_in) & (1'b1 == A_strb_V_0_ack_out))))) begin
            A_strb_V_0_state <= 2'd3;
        end else begin
            A_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_user_V_0_ack_out) & (1'b1 == A_user_V_0_vld_out))) begin
            A_user_V_0_sel_rd <= ~A_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_user_V_0_vld_in) & (1'b1 == A_user_V_0_ack_in))) begin
            A_user_V_0_sel_wr <= ~A_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == A_user_V_0_vld_in) & (1'b1 == A_user_V_0_ack_out) & (2'd3 == A_user_V_0_state)) | ((1'b0 == A_user_V_0_vld_in) & (2'd2 == A_user_V_0_state)))) begin
            A_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == A_user_V_0_vld_in) & (1'b0 == A_user_V_0_ack_out) & (2'd3 == A_user_V_0_state)) | ((1'b0 == A_user_V_0_ack_out) & (2'd1 == A_user_V_0_state)))) begin
            A_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == A_user_V_0_vld_in) & (2'd2 == A_user_V_0_state)) | ((1'b1 == A_user_V_0_ack_out) & (2'd1 == A_user_V_0_state)) | ((2'd3 == A_user_V_0_state) & ~((1'b1 == A_user_V_0_vld_in) & (1'b0 == A_user_V_0_ack_out)) & ~((1'b0 == A_user_V_0_vld_in) & (1'b1 == A_user_V_0_ack_out))))) begin
            A_user_V_0_state <= 2'd3;
        end else begin
            A_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_data_V_1_ack_out) & (1'b1 == B_data_V_1_vld_out))) begin
            B_data_V_1_sel_rd <= ~B_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_data_V_1_vld_in) & (1'b1 == B_data_V_1_ack_in))) begin
            B_data_V_1_sel_wr <= ~B_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == B_data_V_1_vld_in) & (1'b1 == B_data_V_1_ack_out) & (2'd3 == B_data_V_1_state)) | ((1'b0 == B_data_V_1_vld_in) & (2'd2 == B_data_V_1_state)))) begin
            B_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == B_data_V_1_vld_in) & (1'b0 == B_data_V_1_ack_out) & (2'd3 == B_data_V_1_state)) | ((1'b0 == B_data_V_1_ack_out) & (2'd1 == B_data_V_1_state)))) begin
            B_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == B_data_V_1_vld_in) & (2'd2 == B_data_V_1_state)) | ((1'b1 == B_data_V_1_ack_out) & (2'd1 == B_data_V_1_state)) | ((2'd3 == B_data_V_1_state) & ~((1'b1 == B_data_V_1_vld_in) & (1'b0 == B_data_V_1_ack_out)) & ~((1'b0 == B_data_V_1_vld_in) & (1'b1 == B_data_V_1_ack_out))))) begin
            B_data_V_1_state <= 2'd3;
        end else begin
            B_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_dest_V_1_ack_out) & (1'b1 == B_dest_V_1_vld_out))) begin
            B_dest_V_1_sel_rd <= ~B_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_dest_V_1_vld_in) & (1'b1 == B_dest_V_1_ack_in))) begin
            B_dest_V_1_sel_wr <= ~B_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == B_dest_V_1_vld_in) & (1'b1 == B_dest_V_1_ack_out) & (2'd3 == B_dest_V_1_state)) | ((1'b0 == B_dest_V_1_vld_in) & (2'd2 == B_dest_V_1_state)))) begin
            B_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == B_dest_V_1_vld_in) & (1'b0 == B_dest_V_1_ack_out) & (2'd3 == B_dest_V_1_state)) | ((1'b0 == B_dest_V_1_ack_out) & (2'd1 == B_dest_V_1_state)))) begin
            B_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == B_dest_V_1_vld_in) & (2'd2 == B_dest_V_1_state)) | ((1'b1 == B_dest_V_1_ack_out) & (2'd1 == B_dest_V_1_state)) | ((2'd3 == B_dest_V_1_state) & ~((1'b1 == B_dest_V_1_vld_in) & (1'b0 == B_dest_V_1_ack_out)) & ~((1'b0 == B_dest_V_1_vld_in) & (1'b1 == B_dest_V_1_ack_out))))) begin
            B_dest_V_1_state <= 2'd3;
        end else begin
            B_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_id_V_1_ack_out) & (1'b1 == B_id_V_1_vld_out))) begin
            B_id_V_1_sel_rd <= ~B_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_id_V_1_vld_in) & (1'b1 == B_id_V_1_ack_in))) begin
            B_id_V_1_sel_wr <= ~B_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == B_id_V_1_vld_in) & (1'b1 == B_id_V_1_ack_out) & (2'd3 == B_id_V_1_state)) | ((1'b0 == B_id_V_1_vld_in) & (2'd2 == B_id_V_1_state)))) begin
            B_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == B_id_V_1_vld_in) & (1'b0 == B_id_V_1_ack_out) & (2'd3 == B_id_V_1_state)) | ((1'b0 == B_id_V_1_ack_out) & (2'd1 == B_id_V_1_state)))) begin
            B_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == B_id_V_1_vld_in) & (2'd2 == B_id_V_1_state)) | ((1'b1 == B_id_V_1_ack_out) & (2'd1 == B_id_V_1_state)) | ((2'd3 == B_id_V_1_state) & ~((1'b1 == B_id_V_1_vld_in) & (1'b0 == B_id_V_1_ack_out)) & ~((1'b0 == B_id_V_1_vld_in) & (1'b1 == B_id_V_1_ack_out))))) begin
            B_id_V_1_state <= 2'd3;
        end else begin
            B_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_keep_V_1_ack_out) & (1'b1 == B_keep_V_1_vld_out))) begin
            B_keep_V_1_sel_rd <= ~B_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_keep_V_1_vld_in) & (1'b1 == B_keep_V_1_ack_in))) begin
            B_keep_V_1_sel_wr <= ~B_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == B_keep_V_1_vld_in) & (1'b1 == B_keep_V_1_ack_out) & (2'd3 == B_keep_V_1_state)) | ((1'b0 == B_keep_V_1_vld_in) & (2'd2 == B_keep_V_1_state)))) begin
            B_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == B_keep_V_1_vld_in) & (1'b0 == B_keep_V_1_ack_out) & (2'd3 == B_keep_V_1_state)) | ((1'b0 == B_keep_V_1_ack_out) & (2'd1 == B_keep_V_1_state)))) begin
            B_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == B_keep_V_1_vld_in) & (2'd2 == B_keep_V_1_state)) | ((1'b1 == B_keep_V_1_ack_out) & (2'd1 == B_keep_V_1_state)) | ((2'd3 == B_keep_V_1_state) & ~((1'b1 == B_keep_V_1_vld_in) & (1'b0 == B_keep_V_1_ack_out)) & ~((1'b0 == B_keep_V_1_vld_in) & (1'b1 == B_keep_V_1_ack_out))))) begin
            B_keep_V_1_state <= 2'd3;
        end else begin
            B_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_last_V_1_ack_out) & (1'b1 == B_last_V_1_vld_out))) begin
            B_last_V_1_sel_rd <= ~B_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_last_V_1_vld_in) & (1'b1 == B_last_V_1_ack_in))) begin
            B_last_V_1_sel_wr <= ~B_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == B_last_V_1_vld_in) & (1'b1 == B_last_V_1_ack_out) & (2'd3 == B_last_V_1_state)) | ((1'b0 == B_last_V_1_vld_in) & (2'd2 == B_last_V_1_state)))) begin
            B_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == B_last_V_1_vld_in) & (1'b0 == B_last_V_1_ack_out) & (2'd3 == B_last_V_1_state)) | ((1'b0 == B_last_V_1_ack_out) & (2'd1 == B_last_V_1_state)))) begin
            B_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == B_last_V_1_vld_in) & (2'd2 == B_last_V_1_state)) | ((1'b1 == B_last_V_1_ack_out) & (2'd1 == B_last_V_1_state)) | ((2'd3 == B_last_V_1_state) & ~((1'b1 == B_last_V_1_vld_in) & (1'b0 == B_last_V_1_ack_out)) & ~((1'b0 == B_last_V_1_vld_in) & (1'b1 == B_last_V_1_ack_out))))) begin
            B_last_V_1_state <= 2'd3;
        end else begin
            B_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_strb_V_1_ack_out) & (1'b1 == B_strb_V_1_vld_out))) begin
            B_strb_V_1_sel_rd <= ~B_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_strb_V_1_vld_in) & (1'b1 == B_strb_V_1_ack_in))) begin
            B_strb_V_1_sel_wr <= ~B_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == B_strb_V_1_vld_in) & (1'b1 == B_strb_V_1_ack_out) & (2'd3 == B_strb_V_1_state)) | ((1'b0 == B_strb_V_1_vld_in) & (2'd2 == B_strb_V_1_state)))) begin
            B_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == B_strb_V_1_vld_in) & (1'b0 == B_strb_V_1_ack_out) & (2'd3 == B_strb_V_1_state)) | ((1'b0 == B_strb_V_1_ack_out) & (2'd1 == B_strb_V_1_state)))) begin
            B_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == B_strb_V_1_vld_in) & (2'd2 == B_strb_V_1_state)) | ((1'b1 == B_strb_V_1_ack_out) & (2'd1 == B_strb_V_1_state)) | ((2'd3 == B_strb_V_1_state) & ~((1'b1 == B_strb_V_1_vld_in) & (1'b0 == B_strb_V_1_ack_out)) & ~((1'b0 == B_strb_V_1_vld_in) & (1'b1 == B_strb_V_1_ack_out))))) begin
            B_strb_V_1_state <= 2'd3;
        end else begin
            B_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_user_V_1_ack_out) & (1'b1 == B_user_V_1_vld_out))) begin
            B_user_V_1_sel_rd <= ~B_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_user_V_1_vld_in) & (1'b1 == B_user_V_1_ack_in))) begin
            B_user_V_1_sel_wr <= ~B_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == B_user_V_1_vld_in) & (1'b1 == B_user_V_1_ack_out) & (2'd3 == B_user_V_1_state)) | ((1'b0 == B_user_V_1_vld_in) & (2'd2 == B_user_V_1_state)))) begin
            B_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == B_user_V_1_vld_in) & (1'b0 == B_user_V_1_ack_out) & (2'd3 == B_user_V_1_state)) | ((1'b0 == B_user_V_1_ack_out) & (2'd1 == B_user_V_1_state)))) begin
            B_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == B_user_V_1_vld_in) & (2'd2 == B_user_V_1_state)) | ((1'b1 == B_user_V_1_ack_out) & (2'd1 == B_user_V_1_state)) | ((2'd3 == B_user_V_1_state) & ~((1'b1 == B_user_V_1_vld_in) & (1'b0 == B_user_V_1_ack_out)) & ~((1'b0 == B_user_V_1_vld_in) & (1'b1 == B_user_V_1_ack_out))))) begin
            B_user_V_1_state <= 2'd3;
        end else begin
            B_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd1 == tmp_7_fu_217_p2))) begin
        i_fu_80 <= i_1_fu_237_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_80 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_1_reg_287))) begin
        match_reg_139 <= tmp_7_reg_321;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        match_reg_139 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd1 == tmp_7_fu_217_p2))) begin
        samples_fu_76 <= samples_1_fu_231_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        samples_fu_76 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_data_V_0_load_A)) begin
        A_data_V_0_payload_A <= A_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_data_V_0_load_B)) begin
        A_data_V_0_payload_B <= A_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_dest_V_0_load_A)) begin
        A_dest_V_0_payload_A <= A_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_dest_V_0_load_B)) begin
        A_dest_V_0_payload_B <= A_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_id_V_0_load_A)) begin
        A_id_V_0_payload_A <= A_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_id_V_0_load_B)) begin
        A_id_V_0_payload_B <= A_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_keep_V_0_load_A)) begin
        A_keep_V_0_payload_A <= A_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_keep_V_0_load_B)) begin
        A_keep_V_0_payload_B <= A_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_strb_V_0_load_A)) begin
        A_strb_V_0_payload_A <= A_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_strb_V_0_load_B)) begin
        A_strb_V_0_payload_B <= A_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        A_temp_data_V_reg_291 <= A_data_V_0_data_out;
        A_temp_dest_V_reg_316 <= A_dest_V_0_data_out;
        A_temp_id_V_reg_311 <= A_id_V_0_data_out;
        A_temp_keep_V_reg_296 <= A_keep_V_0_data_out;
        A_temp_strb_V_reg_301 <= A_strb_V_0_data_out;
        A_temp_user_V_reg_306 <= A_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd1 == tmp_7_fu_217_p2))) begin
        A_temp_last_V_reg_326 <= A_temp_last_V_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_user_V_0_load_A)) begin
        A_user_V_0_payload_A <= A_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_user_V_0_load_B)) begin
        A_user_V_0_payload_B <= A_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_data_V_1_load_A)) begin
        B_data_V_1_payload_A <= A_temp_data_V_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_data_V_1_load_B)) begin
        B_data_V_1_payload_B <= A_temp_data_V_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_dest_V_1_load_A)) begin
        B_dest_V_1_payload_A <= A_temp_dest_V_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_dest_V_1_load_B)) begin
        B_dest_V_1_payload_B <= A_temp_dest_V_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_id_V_1_load_A)) begin
        B_id_V_1_payload_A <= A_temp_id_V_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_id_V_1_load_B)) begin
        B_id_V_1_payload_B <= A_temp_id_V_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_keep_V_1_load_A)) begin
        B_keep_V_1_payload_A <= A_temp_keep_V_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_keep_V_1_load_B)) begin
        B_keep_V_1_payload_B <= A_temp_keep_V_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_last_V_1_load_A)) begin
        B_last_V_1_payload_A <= A_temp_last_V_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_last_V_1_load_B)) begin
        B_last_V_1_payload_B <= A_temp_last_V_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_strb_V_1_load_A)) begin
        B_strb_V_1_payload_A <= A_temp_strb_V_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_strb_V_1_load_B)) begin
        B_strb_V_1_payload_B <= A_temp_strb_V_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_user_V_1_load_A)) begin
        B_user_V_1_payload_A <= A_temp_user_V_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_user_V_1_load_B)) begin
        B_user_V_1_payload_B <= A_temp_user_V_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_1_reg_287 <= tmp_1_reg_287;
        i_load_reg_282 <= i_fu_80;
        tmp_1_reg_287 <= tmp_1_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        length_read_reg_266 <= length_r;
        tmp_2_reg_276 <= tmp_2_fu_157_p1;
        tmp_reg_271 <= tmp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp_7_reg_321 <= tmp_7_fu_217_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd1 == tmp_1_reg_287))) begin
        A_TDATA_blk_n = A_data_V_0_state[1'd0];
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        A_data_V_0_ack_out = 1'b1;
    end else begin
        A_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_data_V_0_sel)) begin
        A_data_V_0_data_out = A_data_V_0_payload_B;
    end else begin
        A_data_V_0_data_out = A_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        A_dest_V_0_ack_out = 1'b1;
    end else begin
        A_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_dest_V_0_sel)) begin
        A_dest_V_0_data_out = A_dest_V_0_payload_B;
    end else begin
        A_dest_V_0_data_out = A_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        A_id_V_0_ack_out = 1'b1;
    end else begin
        A_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_id_V_0_sel)) begin
        A_id_V_0_data_out = A_id_V_0_payload_B;
    end else begin
        A_id_V_0_data_out = A_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        A_keep_V_0_ack_out = 1'b1;
    end else begin
        A_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_keep_V_0_sel)) begin
        A_keep_V_0_data_out = A_keep_V_0_payload_B;
    end else begin
        A_keep_V_0_data_out = A_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        A_strb_V_0_ack_out = 1'b1;
    end else begin
        A_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_strb_V_0_sel)) begin
        A_strb_V_0_data_out = A_strb_V_0_payload_B;
    end else begin
        A_strb_V_0_data_out = A_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        A_user_V_0_ack_out = 1'b1;
    end else begin
        A_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_user_V_0_sel)) begin
        A_user_V_0_data_out = A_user_V_0_payload_B;
    end else begin
        A_user_V_0_data_out = A_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == tmp_7_reg_321)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321)))) begin
        B_TDATA_blk_n = B_data_V_1_state[1'd1];
    end else begin
        B_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == B_data_V_1_sel)) begin
        B_data_V_1_data_out = B_data_V_1_payload_B;
    end else begin
        B_data_V_1_data_out = B_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        B_data_V_1_vld_in = 1'b1;
    end else begin
        B_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_dest_V_1_sel)) begin
        B_dest_V_1_data_out = B_dest_V_1_payload_B;
    end else begin
        B_dest_V_1_data_out = B_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        B_dest_V_1_vld_in = 1'b1;
    end else begin
        B_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_id_V_1_sel)) begin
        B_id_V_1_data_out = B_id_V_1_payload_B;
    end else begin
        B_id_V_1_data_out = B_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        B_id_V_1_vld_in = 1'b1;
    end else begin
        B_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_keep_V_1_sel)) begin
        B_keep_V_1_data_out = B_keep_V_1_payload_B;
    end else begin
        B_keep_V_1_data_out = B_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        B_keep_V_1_vld_in = 1'b1;
    end else begin
        B_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_last_V_1_sel)) begin
        B_last_V_1_data_out = B_last_V_1_payload_B;
    end else begin
        B_last_V_1_data_out = B_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        B_last_V_1_vld_in = 1'b1;
    end else begin
        B_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_strb_V_1_sel)) begin
        B_strb_V_1_data_out = B_strb_V_1_payload_B;
    end else begin
        B_strb_V_1_data_out = B_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        B_strb_V_1_vld_in = 1'b1;
    end else begin
        B_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_user_V_1_sel)) begin
        B_user_V_1_data_out = B_user_V_1_payload_B;
    end else begin
        B_user_V_1_data_out = B_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_7_reg_321) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        B_user_V_1_vld_in = 1'b1;
    end else begin
        B_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_1_fu_174_p2)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~((1'b0 == B_data_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_dest_V_1_ack_in)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~((1'b0 == B_data_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_dest_V_1_ack_in)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_tmp_1_reg_287))) begin
        match_phi_fu_143_p4 = tmp_7_reg_321;
    end else begin
        match_phi_fu_143_p4 = match_reg_139;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_1_fu_174_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_1_fu_174_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ~((1'b0 == B_data_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_dest_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_TREADY = A_dest_V_0_state[1'd1];

assign A_data_V_0_ack_in = A_data_V_0_state[1'd1];

assign A_data_V_0_load_A = (A_data_V_0_state_cmp_full & ~A_data_V_0_sel_wr);

assign A_data_V_0_load_B = (A_data_V_0_sel_wr & A_data_V_0_state_cmp_full);

assign A_data_V_0_sel = A_data_V_0_sel_rd;

assign A_data_V_0_state_cmp_full = ((A_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_data_V_0_vld_in = A_TVALID;

assign A_data_V_0_vld_out = A_data_V_0_state[1'd0];

assign A_dest_V_0_ack_in = A_dest_V_0_state[1'd1];

assign A_dest_V_0_load_A = (A_dest_V_0_state_cmp_full & ~A_dest_V_0_sel_wr);

assign A_dest_V_0_load_B = (A_dest_V_0_sel_wr & A_dest_V_0_state_cmp_full);

assign A_dest_V_0_sel = A_dest_V_0_sel_rd;

assign A_dest_V_0_state_cmp_full = ((A_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_dest_V_0_vld_in = A_TVALID;

assign A_dest_V_0_vld_out = A_dest_V_0_state[1'd0];

assign A_id_V_0_ack_in = A_id_V_0_state[1'd1];

assign A_id_V_0_load_A = (A_id_V_0_state_cmp_full & ~A_id_V_0_sel_wr);

assign A_id_V_0_load_B = (A_id_V_0_sel_wr & A_id_V_0_state_cmp_full);

assign A_id_V_0_sel = A_id_V_0_sel_rd;

assign A_id_V_0_state_cmp_full = ((A_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_id_V_0_vld_in = A_TVALID;

assign A_id_V_0_vld_out = A_id_V_0_state[1'd0];

assign A_keep_V_0_ack_in = A_keep_V_0_state[1'd1];

assign A_keep_V_0_load_A = (A_keep_V_0_state_cmp_full & ~A_keep_V_0_sel_wr);

assign A_keep_V_0_load_B = (A_keep_V_0_sel_wr & A_keep_V_0_state_cmp_full);

assign A_keep_V_0_sel = A_keep_V_0_sel_rd;

assign A_keep_V_0_state_cmp_full = ((A_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_keep_V_0_vld_in = A_TVALID;

assign A_keep_V_0_vld_out = A_keep_V_0_state[1'd0];

assign A_strb_V_0_ack_in = A_strb_V_0_state[1'd1];

assign A_strb_V_0_load_A = (A_strb_V_0_state_cmp_full & ~A_strb_V_0_sel_wr);

assign A_strb_V_0_load_B = (A_strb_V_0_sel_wr & A_strb_V_0_state_cmp_full);

assign A_strb_V_0_sel = A_strb_V_0_sel_rd;

assign A_strb_V_0_state_cmp_full = ((A_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_strb_V_0_vld_in = A_TVALID;

assign A_strb_V_0_vld_out = A_strb_V_0_state[1'd0];

assign A_temp_last_V_fu_226_p2 = ((samples_fu_76 == tmp_reg_271) ? 1'b1 : 1'b0);

assign A_user_V_0_ack_in = A_user_V_0_state[1'd1];

assign A_user_V_0_load_A = (A_user_V_0_state_cmp_full & ~A_user_V_0_sel_wr);

assign A_user_V_0_load_B = (A_user_V_0_sel_wr & A_user_V_0_state_cmp_full);

assign A_user_V_0_sel = A_user_V_0_sel_rd;

assign A_user_V_0_state_cmp_full = ((A_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_user_V_0_vld_in = A_TVALID;

assign A_user_V_0_vld_out = A_user_V_0_state[1'd0];

assign B_TDATA = B_data_V_1_data_out;

assign B_TDEST = B_dest_V_1_data_out;

assign B_TID = B_id_V_1_data_out;

assign B_TKEEP = B_keep_V_1_data_out;

assign B_TLAST = B_last_V_1_data_out;

assign B_TSTRB = B_strb_V_1_data_out;

assign B_TUSER = B_user_V_1_data_out;

assign B_TVALID = B_dest_V_1_state[1'd0];

assign B_data_V_1_ack_in = B_data_V_1_state[1'd1];

assign B_data_V_1_ack_out = B_TREADY;

assign B_data_V_1_load_A = (B_data_V_1_state_cmp_full & ~B_data_V_1_sel_wr);

assign B_data_V_1_load_B = (B_data_V_1_sel_wr & B_data_V_1_state_cmp_full);

assign B_data_V_1_sel = B_data_V_1_sel_rd;

assign B_data_V_1_state_cmp_full = ((B_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_data_V_1_vld_out = B_data_V_1_state[1'd0];

assign B_dest_V_1_ack_in = B_dest_V_1_state[1'd1];

assign B_dest_V_1_ack_out = B_TREADY;

assign B_dest_V_1_load_A = (B_dest_V_1_state_cmp_full & ~B_dest_V_1_sel_wr);

assign B_dest_V_1_load_B = (B_dest_V_1_sel_wr & B_dest_V_1_state_cmp_full);

assign B_dest_V_1_sel = B_dest_V_1_sel_rd;

assign B_dest_V_1_state_cmp_full = ((B_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_dest_V_1_vld_out = B_dest_V_1_state[1'd0];

assign B_id_V_1_ack_in = B_id_V_1_state[1'd1];

assign B_id_V_1_ack_out = B_TREADY;

assign B_id_V_1_load_A = (B_id_V_1_state_cmp_full & ~B_id_V_1_sel_wr);

assign B_id_V_1_load_B = (B_id_V_1_sel_wr & B_id_V_1_state_cmp_full);

assign B_id_V_1_sel = B_id_V_1_sel_rd;

assign B_id_V_1_state_cmp_full = ((B_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_id_V_1_vld_out = B_id_V_1_state[1'd0];

assign B_keep_V_1_ack_in = B_keep_V_1_state[1'd1];

assign B_keep_V_1_ack_out = B_TREADY;

assign B_keep_V_1_load_A = (B_keep_V_1_state_cmp_full & ~B_keep_V_1_sel_wr);

assign B_keep_V_1_load_B = (B_keep_V_1_sel_wr & B_keep_V_1_state_cmp_full);

assign B_keep_V_1_sel = B_keep_V_1_sel_rd;

assign B_keep_V_1_state_cmp_full = ((B_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_keep_V_1_vld_out = B_keep_V_1_state[1'd0];

assign B_last_V_1_ack_in = B_last_V_1_state[1'd1];

assign B_last_V_1_ack_out = B_TREADY;

assign B_last_V_1_load_A = (B_last_V_1_state_cmp_full & ~B_last_V_1_sel_wr);

assign B_last_V_1_load_B = (B_last_V_1_sel_wr & B_last_V_1_state_cmp_full);

assign B_last_V_1_sel = B_last_V_1_sel_rd;

assign B_last_V_1_state_cmp_full = ((B_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_last_V_1_vld_out = B_last_V_1_state[1'd0];

assign B_strb_V_1_ack_in = B_strb_V_1_state[1'd1];

assign B_strb_V_1_ack_out = B_TREADY;

assign B_strb_V_1_load_A = (B_strb_V_1_state_cmp_full & ~B_strb_V_1_sel_wr);

assign B_strb_V_1_load_B = (B_strb_V_1_sel_wr & B_strb_V_1_state_cmp_full);

assign B_strb_V_1_sel = B_strb_V_1_sel_rd;

assign B_strb_V_1_state_cmp_full = ((B_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_strb_V_1_vld_out = B_strb_V_1_state[1'd0];

assign B_user_V_1_ack_in = B_user_V_1_state[1'd1];

assign B_user_V_1_ack_out = B_TREADY;

assign B_user_V_1_load_A = (B_user_V_1_state_cmp_full & ~B_user_V_1_sel_wr);

assign B_user_V_1_load_B = (B_user_V_1_sel_wr & B_user_V_1_state_cmp_full);

assign B_user_V_1_sel = B_user_V_1_sel_rd;

assign B_user_V_1_state_cmp_full = ((B_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_user_V_1_vld_out = B_user_V_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (1'b0 == A_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (1'b0 == A_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_1_reg_287) & (1'b0 == A_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((1'd1 == tmp_1_reg_287) & (1'b0 == A_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state4_io = ((1'd1 == tmp_7_reg_321) & (1'b0 == B_data_V_1_ack_in));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd1 == tmp_7_reg_321) & (1'b0 == B_data_V_1_ack_in));
end

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((1'b0 == B_data_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_dest_V_1_ack_in));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_237_p2 = (i_load_reg_282 + 32'd1);

assign samples_1_fu_231_p2 = (samples_fu_76 + 32'd1);

assign tmp_1_fu_174_p2 = (($signed(i_fu_80) < $signed(length_read_reg_266)) ? 1'b1 : 1'b0);

assign tmp_2_fu_157_p1 = data_compare_V[31:0];

assign tmp_3_fu_203_p1 = A_data_V_0_data_out[31:0];

assign tmp_5_fu_207_p2 = (tmp_2_reg_276 & tmp_3_fu_203_p1);

assign tmp_6_fu_212_p2 = ((tmp_5_fu_207_p2 == tmp_2_reg_276) ? 1'b1 : 1'b0);

assign tmp_7_fu_217_p2 = (tmp_6_fu_212_p2 | match_phi_fu_143_p4);

assign tmp_fu_151_p2 = ($signed(32'd4294967295) + $signed(length_r));

endmodule //trace_cntrl_64
